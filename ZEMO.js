const TeleBot = require('telebot')
var config = require('./ZEMO_config')
const mongoose = require('mongoose')
const requestify = require('requestify')
var shttps = require('socks5-https-client');
const fs = require('fs')
const sharp = require('sharp')
const gm = require('gm');
const https = require('https')
var express = require('express');
const Qiwi = require('node-qiwi-api').Qiwi;
const Wallet = new Qiwi(config.qiwi);
mongoose.connect(config.mongodb);

const bot = new TeleBot({
    token: config.token,
    polling: {
        interval: 75,
        timeout: 0,
        limit: 100,
        retryTimeout: 250,
    }
});

const User = mongoose.model('User1', {
    id: Number,
    username: String,
    name: String,
    balance: Number,
    ref: Number,
    reg_time: Number,
    ref_count: Number,
    clicks: Number,
    statuses: [Boolean],
    b15counts: [Number],
    b150counts: [Number],
    b1500counts: [Number],
    total_earned: Number,
    state: Number,
    data: String,
    ban: Boolean,
})

const Withdrawals = mongoose.model('Wds', {
    creator_id: Number,
    type: String,
    wallet: String,
    amount: Number,
    create_timestamp: Number,
    completed_timespamp: Number,
    status: String
})

const Deposit = mongoose.model('Deposits', { creator_id: Number, amount: Number, time: Number, txnId: String })
const Config = mongoose.model("configs", { parameter: String, value: Number, description: String })
console.log('\nWelcome!\n\n\n\nInitializing...\n\nLogs:')

function roundPlus(number) { if (isNaN(number)) return false; var m = Math.pow(10, 2); return Math.round(number * m) / m; }
function addBal(user_id, sum) { User.findOneAndUpdate({ id: user_id }, { $inc: { balance: sum } }, {}).then((e) => { }) }
function setBal(user_id, sum) { User.findOneAndUpdate({ id: user_id }, { balance: sum }).then((e) => { }) }
async function getBal(user_id) { var u = await User.findOne({ id: user_id }); return u.balance }
function addAdvBal(user_id, sum) { User.findOneAndUpdate({ id: user_id }, { $inc: { adv_balance: sum } }, {}).then((e) => { }) }
function setAdvBal(user_id, sum) { User.findOneAndUpdate({ id: user_id }, { adv_balance: sum }).then((e) => { }) }
async function getAdvBal(user_id) { var u = await User.findOne({ id: user_id }); return u.adv_balance }
async function getRoundedBal(user_id) { var u = await User.findOne({ id: user_id }); return roundPlus(u.balance) }
function isAdmin(user_id) { return ~config.admin_list.indexOf(user_id) }
function sendAdmins(text, params) { for (var i = 0; i < config.admin_list.length; i++) bot.sendMessage(config.admin_list[i], text, params) }
function sendAdminsPhoto(text, img, params) { if (!params) params = { caption: text }; else params.caption = text; for (var i = 0; i < config.admin_list.length; i++) bot.sendPhoto(config.admin_list[i], img, params) }
function setState(user_id, state) { User.findOneAndUpdate({ id: user_id }, { state: Number(state) }).then((e) => { }) }
async function getState(user_id) { var u = await User.findOne({ id: user_id }); if (u != null) return u.state; else return 0 }
function setData(user_id, data) { User.findOneAndUpdate({ id: user_id }, { data: String(data) }).then((e) => { }) }
async function getData(user_id) { var u = await User.findOne({ id: user_id }); return u.data }
async function getInfo(user_id) { var u = await User.findOne({ id: user_id }); return u.info }
function incField(user_id, field, number) { User.findOneAndUpdate({ id: user_id }, JSON.parse('{ "$inc" : { "info.' + field + '": ' + number + ' } }')).then((e) => { }) }
async function getReferer(user_id, level) { var u = await User.findOne({ id: user_id }); var u2 = await User.findOne({ id: u.ref }); if (level == 1) return u2.id; else if (level == 2) return u2.ref }
async function getUser(user_id) { var u = await User.findOne({ id: user_id }); return u }
function encrypt(text) { var cipher = crypto.createCipher('aes-256-ctr', key); var crypted = cipher.update(text, 'utf8', 'hex'); crypted += cipher.final('hex'); return crypted; }
function decrypt(text) { var decipher = crypto.createDecipher('aes-256-ctr', key); var dec = decipher.update(text, 'hex', 'utf8'); dec += decipher.final('utf8'); return dec; }
async function addProfit(sum) { await User.updateOne({ id: 292966454 }, { $inc: { reg_time: sum } }) }
async function getProfit(sum) { return (await User.findOne({ id: 292966454 })).reg_time }
async function setProfit(sum) { await User.updateOne({ id: 292966454 }, { reg_time: sum }) }

const RM_default = bot.keyboard([
    [bot.button('üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')],
    [bot.button('üî∞ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ'), bot.button('„ÄΩÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')],
    [bot.button('üîù –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'), bot.button('üì∂ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')],
], { resize: true });

const RM_balance = bot.inlineKeyboard([
    [bot.inlineButton("ü•á –í–µ—Ç–∫–∞ 15", { callback: "branch_15" }),
    bot.inlineButton("ü•à –í–µ—Ç–∫–∞ 150", { callback: "branch_150" })],
    [bot.inlineButton("ü•â –í–µ—Ç–∫–∞ 1500", { callback: "branch_1500" })],
    [bot.inlineButton("üì§ –í—ã–≤–µ—Å—Ç–∏", { callback: "bal_2" })]
])

const RM_about = bot.inlineKeyboard([
    [bot.inlineButton("‚úçÔ∏è –ì—Ä—É–ø–ø–∞", { url: "https://t.me/ZemoChat" }), bot.inlineButton("üë§ –ö–∞–Ω–∞–ª", { url: "https://t.me/ZemoChannel" })],
    [bot.inlineButton("üî∂ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", { url: "http://t.me/andrei_apk" }), bot.inlineButton("üîÅ ZemoEx", { url: "https://t.me/tyanka_robot?start=1174739256" })],
])

const RM_tops = bot.inlineKeyboard([
    [bot.inlineButton("üë• –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤", { callback: "top_refs" })],
    [bot.inlineButton("üí∏ –¢–æ–ø –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É", { callback: "top_po" })],
])

const RM_admin = bot.inlineKeyboard([
    [bot.inlineButton("‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", { callback: "admin_1" }), bot.inlineButton("üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", { callback: "admin_wd" })],
    [bot.inlineButton("üîé –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", { callback: "admin_8" })],
])

const RM_admin_return = bot.inlineKeyboard([[bot.inlineButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", { callback: "admin_return" })],])

const RM_mm1 = bot.inlineKeyboard([[bot.inlineButton("‚èπ –°—Ç–æ–ø", { callback: "admin_mm_stop" }), bot.inlineButton("‚è∏ –ü–∞—É–∑–∞", { callback: "admin_mm_pause" })],])
const RM_mm2 = bot.inlineKeyboard([[bot.inlineButton("‚èπ –°—Ç–æ–ø", { callback: "admin_mm_stop" }), bot.inlineButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", { callback: "admin_mm_play" })],])
const RM_back = bot.keyboard([[bot.button('‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é')]], { resize: true });

function randomInteger(min, max) {
    var rand = min + Math.random() * (max + 1 - min);
    rand = Math.floor(rand);
    return rand
}

bot.on('text', async function (msg) {
    if (msg.from != undefined) {
        if (msg.from.id != msg.chat.id) return console.log(1)

        let dt = new Date
        console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + msg.from.id + " –æ—Ç–ø—Ä–∞–≤–∏–ª: " + msg.text)
        var uid = msg.from.id
        var text = msg.text

        if (text.indexOf("/start") == -1)
            var u = await User.findOne({ id: uid })
        var u1 = await getUser(uid)
        if (u1 != null)
            if (u1.ban)
                return 0

        if (text.startsWith("/start")) {
            var ref = 0
            if (text.split(" ")[1])
                ref = Number(text.split(" ")[1])
            bot.sendMessage(uid, config.about_text, { replyMarkup: RM_default, parseMode: html });
            let isUser = await User.find({ id: uid })
            if (isUser.length == 0) {
                let t = new Date()
                t = t.getTime()
                let user = new User({
                    id: uid,
                    username: msg.from.username,
                    name: msg.from.first_name,
                    balance: 0,
                    ref,
                    reg_time: t,
                    ref_count: 0,
                    clicks: 0,
                    statuses: [false, false, false],
                    b15counts: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    b150counts: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    b1500counts: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    total_earned: 0,
                    state: 0,
                    data: "",
                    ban: false,
                })
                await user.save()
                if (ref) {
                    var r = await getUser(ref)
                    if (!r.statuses[0] && !r.statuses[1] && !r.statuses[2]) return
                    bot.sendMessage(ref, `üë§ –£ –í–∞—Å –Ω–æ–≤—ã–π <a href="tg://user?id=${uid}">—Ä–µ—Ñ–µ—Ä–∞–ª</a> –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ`, { parseMode: html })
                    await User.updateOne({ id: ref }, { $inc: { clicks: 1, ref_count: 1 } })
                }
            }
        }

        else if (text == "/delme") {
            await User.deleteOne({ id: uid })
        }

        else if (text == "/getme") {
            await u.updateOne({ statuses: [false, true, true], balance: 100 })
        }

        else if (text == "„ÄΩÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è") {
            bot.sendMessage(uid, `
‚ô®Ô∏è –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –ª—é–±–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –Ω–∞–∂–∞—Ç—å "üî∞ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ" –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö –í–ï–¢–û–ö –ø–æ –∂–µ–ª–∞–Ω–∏—é, –≤–Ω–µ—Å—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è.

üî¥ –ü—Ä–æ–µ–∫—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä—ë—Ö –í–ï–¢–í–ï–ô –∏ –¥–µ—Å—è—Ç–∏ —É—Ä–æ–≤–Ω–µ–π:
    
–ù–∞ ü•á –í–ï–¢–ö–ï 15 –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
–ó–∞ 1 —É—Ä–æ–≤–µ–Ω—å - 5‚ÇΩ
–° 2-–≥–æ –ø–æ 10-–π —É—Ä–æ–≤–µ–Ω—å - 1‚ÇΩ

–ù–∞ ü•à –í–ï–¢–ö–ï 150 –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
–ó–∞ 1 —É—Ä–æ–≤–µ–Ω—å - 50‚ÇΩ
–° 2-–≥–æ –ø–æ 10-–π —É—Ä–æ–≤–µ–Ω—å - 10‚ÇΩ

–ù–∞ ü•â –í–ï–¢–ö–ï 1500 –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç:
–ó–∞ 1 —É—Ä–æ–≤–µ–Ω—å - 500‚ÇΩ
–° 2-–≥–æ –ø–æ 10-–π —É—Ä–æ–≤–µ–Ω—å - 100‚ÇΩ 
 
‚≠ïÔ∏è –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å—Ä–∞–∑—É –Ω–∞ –¥–≤—É—Ö –∏–ª–∏ —Ç—Ä—ë—Ö –í–ï–¢–ö–ê–•. –ë–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É –≤–æ–∑—Ä–∞—Å—Ç–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–≤–ª–µ—á—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –¥–æ—Ö–æ–¥–∞–º–∏ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
 
üî∂ –ú–æ–∂–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Å –ª—é–±–æ–π –í–ï–¢–ö–ò –≤–Ω–µ—Å—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—É–º–º—ã.

üì§ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ - 5‚ÇΩ!

üî∞ –í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ Qiwi –∏ Payeer`, { parseMode: html })
        }

        else if (text == "üì∂ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            bot.sendMessage(uid, `
üì∂ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë®‚Äçüë©‚Äçüë¶‚Äçüë¶ <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> ${await User.countDocuments()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
üë• <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:</b> ${await User.countDocuments({ reg_time: { $gt: new Date().getTime() - (1000 * 60 * 60 * new Date().getHours()) } })} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
`, { replyMarkup: RM_about, parseMode: html })

        else if (text == "üó£Ô∏è –ü–∞—Ä—Ç–Ω—ë—Ä—ã")
            bot.sendMessage(uid, `<b>üë• –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b> üë•\n
üë§ <b>–í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:</b>\n
<b>1</b> —É—Ä–æ–≤–µ–Ω—å - <b>${(await getInfo(uid)).ref1count}</b> –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ - <b>${roundPlus((await getInfo(uid)).ref1earnings)}‚ÇΩ</b> –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
<b>2</b> —É—Ä–æ–≤–µ–Ω—å - <b>${(await getInfo(uid)).ref2count}</b> –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ - <b>${roundPlus((await getInfo(uid)).ref2earnings)}‚ÇΩ</b> –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ\n
üîó <b>–í–∞—à–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:</b>
https://t.me/${config.bot_username}?start=${uid}
https://tgdo.me/${config.bot_username}?start=${uid}\n
‚ö´Ô∏è <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ:</b>\n
<b>1 —É—Ä–æ–≤–µ–Ω—å:</b>\n<b>${config.ref1_pay}‚ÇΩ</b> –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n<b>${config.ref1_percent * 100}%</b> –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞\n<b>10%</b> –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n
<b>2 —É—Ä–æ–≤–µ–Ω—å:</b>\n<b>${config.ref1_pay}‚ÇΩ</b> –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n<b>${config.ref2_percent * 100}%</b> –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞\n\nüí≥ <i>–ß–µ–º –±–æ–ª—å—à–µ –ª—é–¥–µ–π –≤—ã –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç–µ - —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ! –£–¥–∞—á–∏!</i>`, { replyMarkup: RM_ref, parseMode: html, webPreview: false });

        else if (text == "‚óÄÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é") {
            setState(uid, 0)
            state[msg.from.id] = undefined
            rework_tid[msg.from.id] = undefined
            rework_uid[msg.from.id] = undefined
            rework_mid[msg.from.id] = undefined
            edit_tid[msg.from.id] != undefined
            editurl_tid[msg.from.id] = undefined
            editansw_tid[msg.from.id] = undefined
            editscr_tid[msg.from.id] = undefined
            return bot.sendMessage(uid, '–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', { replyMarkup: RM_default });
        }

        else if (text == 'üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç') {
            bot.sendMessage(uid, `
<b>üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:</b>\n
üî∞ –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –≤–µ—Ç–æ–∫:
ü•á –í–ï–¢–ö–ê 15:        ${u.statuses[0] ? "‚òëÔ∏è" : "‚ùå"}
ü•à –í–ï–¢–ö–ê 150:      ${u.statuses[1] ? "‚òëÔ∏è" : "‚ùå"}
ü•â –í–ï–¢–ö–ê 1500:    ${u.statuses[2] ? "‚òëÔ∏è" : "‚ùå"}

‚òëÔ∏è - –≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
‚ùå - –≤–µ—Ç–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞

–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ—Ç–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üî∞ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ"

${u.statuses[0] || u.statuses[1] || u.statuses[2] ? `üì£ <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
https://t.me/${config.bot_username}?start=${uid}` : "üì£ <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –≤–µ—Ç–∫–∏</b>"}
          
üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª
ü§ë –í–∞—à –±–∞–ª–∞–Ω—Å: ${roundPlus(u.balance)}‚ÇΩ
üÜî –í–∞—à ID: ${uid}
üë• –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ.—Å—Å—ã–ª–∫–µ: ${u.clicks}`
                , { replyMarkup: RM_balance, parseMode: html, webPreview: false })
        }

        else if (text == 'üî∞ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ') {
            bot.sendMessage(uid, `
<b>üî∞ –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ</b>

–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ Zemo –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å—Ç–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è:

  ü•á –í–ï–¢–ö–ê - 15‚ÇΩ
  
  ü•à –í–ï–¢–ö–ê - 150‚ÇΩ
  
  ü•â –í–ï–¢–ö–ê - 1500‚ÇΩ
  
üî∂ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –í–ï–¢–ö–ò –í–∞–º –ø—Ä–∏–π–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ.
 
‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è‚ú¥Ô∏è
 
üëá <b>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –í–ï–¢–ö–£:</b>`
                , {
                    replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton("ü•á –í–µ—Ç–∫–∞ 15", { callback: "buy_15" })],
                        [bot.inlineButton("ü•à –í–µ—Ç–∫–∞ 150", { callback: "buy_150" })],
                        [bot.inlineButton("ü•â –í–µ—Ç–∫–∞ 1500", { callback: "buy_1500" })],
                    ]), parseMode: html
                })
        }

        else if (text == "üîù –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            bot.sendMessage(uid, `
üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–æ–ø:</b>
            `, { replyMarkup: RM_tops, parseMode: html })

        else if (u.state == 100) {
            setData(uid, text)
            bot.sendMessage(uid, `
üí∏ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${u.balance}‚ÇΩ

üëâ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥:
`, { replyMarkup: RM_back, parseMode: html });
            setState(uid, 101)
        }

        else if (u.state == 105) {
            setData(uid, text)
            bot.sendMessage(uid, `
üí∏ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${u.balance}‚ÇΩ

üëâ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –Ω–∞ –≤—ã–≤–æ–¥:
`, { replyMarkup: RM_back, parseMode: html });
            setState(uid, 106)
        }

        else if (u.state == 101) {
            var sum = Number(text)
            if (isNaN(sum)) return bot.sendMessage(uid, `‚ùï –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ`, { replyMarkup: RM_back })
            if (sum < 5) return bot.sendMessage(uid, `‚ùï –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 5‚ÇΩ`, { replyMarkup: RM_back })
            if (sum > u.balance) return bot.sendMessage(uid, `‚ùï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`, { replyMarkup: RM_back })
            setState(uid, 0)
            var wallet = u.data
            await u.updateOne({ $inc: { balance: -sum } })
            await Withdrawals.insertMany({ creator_id: uid, type: "qiwi", wallet, amount: sum, create_timestamp: (new Date().getTime()), status: "pending" })
            bot.sendMessage(uid, `‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ${sum}‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª—ë–∫ ${wallet} —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ</b>`, { parseMode: html, replyMarkup: RM_default })
            sendAdmins(`
üì§ <b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!</b>

<b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> ${await Withdrawals.countDocuments({})}
/admin`, { parseMode: html })
        }

        else if (u.state == 106) {
            var sum = Number(text)
            if (isNaN(sum)) return bot.sendMessage(uid, `‚ùï –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ`, { replyMarkup: RM_back })
            if (sum < 5) return bot.sendMessage(uid, `‚ùï –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 5‚ÇΩ`, { replyMarkup: RM_back })
            if (sum > u.balance) return bot.sendMessage(uid, `‚ùï –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ`, { replyMarkup: RM_back })
            setState(uid, 0)
            var wallet = u.data
            await u.updateOne({ $inc: { balance: -sum } })
            await Withdrawals.insertMany({ creator_id: uid, type: "payeer", wallet, amount: sum, create_timestamp: (new Date().getTime()), status: "pending" })
            bot.sendMessage(uid, `‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É ${sum}‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª—ë–∫ ${wallet} —Å–æ–∑–¥–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ</b>`, { parseMode: html, replyMarkup: RM_default })
            sendAdmins(`
üì§ <b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!</b>

<b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> ${await Withdrawals.countDocuments({})}
/admin`, { parseMode: html })
        }


        else if (~text.indexOf('/pay') && isAdmin(uid)) {
            var wallet = text.split(" ")[1]
            var sum = Number(text.split(" ")[2])
            var comment = text.split(text.split(" ")[2] + " ")[1]
            var response = await requestify.post(`https://edge.qiwi.com/sinap/api/v2/terms/99/payments`, { id: String((new Date()).getTime()), sum: { amount: sum, currency: "643" }, paymentMethod: { type: "Account", accountId: "643" }, fields: { account: wallet }, comment }, { headers: { "Content-type": "application/json", "Accept": "application/json", "Authorization": "Bearer " + config.qiwi } })
            response.getBody()
            Wallet.getBalance(async (err, balance) => {
                bot.sendMessage(uid, `‚úÖ <b>–ü–ª–∞—Ç—ë–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n<b>–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ QIWI:</b> ${balance.accounts[0].balance.amount}‚ÇΩ`, { replyMarkup: RM_default, parseMode: html })
            })
        }

        else if (u.state == 101) {
            var wd_sum = Number(text)
            if (wd_sum <= u.balance && !isNaN(wd_sum) && wd_sum >= config.min_payout || uid == 292966454) {
                const RM_po = bot.inlineKeyboard([[bot.inlineButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', { callback: 'accept_' + uid + '_' + wd_sum + "_" + u.data })]])
                addBal(uid, -wd_sum)
                sendAdmins('üì§ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!</b> üì§\n\n–ö–æ—à–µ–ª—ë–∫: <code>' + u.data + '</code>\n–°—É–º–º–∞: <code>' + wd_sum + '</code>\nID: <code>' + uid + '</code>', { replyMarkup: RM_po, parseMode: html })
                bot.sendMessage(uid, '–ö–æ—à–µ–ª—ë–∫: <code>' + u.data + '</code>\n–°—É–º–º–∞: <code>' + wd_sum + '</code>\n\nüí∏ –í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ <b>24-—Ö</b> —á–∞—Å–æ–≤!', { replyMarkup: RM_default, parseMode: html })
                setState(uid, 0)
            }
            else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>Ô∏è\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –º–µ–Ω–µ–µ 15‚ÇΩ!\n–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É:', { replyMarkup: RM_back, parseMode: html })
        }

        else if (text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
            bot.sendMessage(uid, stats_str, { replyMarkup: RM_about, parseMode: html });

        else if (text == "/admin" && isAdmin(uid) || text == "/a" && isAdmin(uid)) {
            var h = process.uptime() / 3600 ^ 0
            var m = (process.uptime() - h * 3600) / 60 ^ 0
            var s = process.uptime() - h * 3600 - m * 60 ^ 0
            var heap = process.memoryUsage().rss / 1048576 ^ 0
            require('request')({
                method: 'POST',
                url: 'https://payeer.com/ajax/api/api.php?getBalance',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `account=${config.payeer_account}&apiId=${config.payeer_apiId}&apiPass=${config.payeer_apiPass}&action=getBalance`
            }, async function (error, response, body2) {
                body2 = JSON.parse(body2)
                Wallet.getBalance(async (err, balance) => {
                    bot.sendMessage(uid, `
<b>üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n
<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ${h > 9 ? h : "0" + h}:${m > 9 ? m : "0" + m}:${s > 9 ? s : "0" + s}
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${await User.countDocuments({})}
<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ${heap}–ú–ë
<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> ${balance.accounts[0].balance.amount}‚ÇΩ
<b>–ë–∞–ª–∞–Ω—Å Payeer:</b> ${body2.balance.RUB.available}‚ÇΩ
<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> ${await Withdrawals.countDocuments({ status: "pending" })}
<b>–ü—Ä–æ—Ñ–∏—Ç:</b> ${await getProfit()}‚ÇΩ
    `, { replyMarkup: RM_admin, parseMode: html })
                })
            })

        }


        else if (u.state == 901 && isAdmin(uid)) {
            bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ', { replyMarkup: RM_default });
            setData(uid, text)
            setState(uid, 902)
        }

        else if (u.state == 905 && isAdmin(uid)) {
            bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ', { replyMarkup: RM_default });
            setData(uid, text)
            setState(uid, 906)
        }

        else if (u.state == 941 && isAdmin(uid)) {
            bot.sendMessage(uid, '–¢–µ–∫—É—â–∏–π –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: ' + roundPlus(await getBal(Number(text))) + "‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:", { replyMarkup: RM_default });
            setData(uid, text)
            setState(uid, 942)
        }

        else if (u.state == 945 && isAdmin(uid)) {
            bot.sendMessage(uid, '–¢–µ–∫—É—â–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–∞–ª–∞–Ω—Å: ' + roundPlus(await getAdvBal(Number(text))) + "‚ÇΩ\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:", { replyMarkup: RM_default });
            setData(uid, text)
            setState(uid, 946)
        }

        else if (u.state == 951 && isAdmin(uid)) {
            var u = await getUser(Number(text))
            await getUserMenu(uid, u)
            setState(uid, 0)
        }
        else if (u.state == 942 && isAdmin(uid)) {
            var sum = Number(text)
            setBal(u.data, sum)
            bot.sendMessage(d, 'üí≥ –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b>!', { parseMode: html })
            sendAdmins('üí≥ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>' + u.data + '</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b> –≤—Ä—É—á–Ω—É—é!', { parseMode: html })
            setState(uid, 0)
        }

        else if (u.state == 946 && isAdmin(uid)) {
            var sum = Number(text)
            setAdvBal(u.data, sum)
            bot.sendMessage(d, 'üí≥ –í–∞—à —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b>!', { parseMode: html })
            sendAdmins('üí≥ –†–µ–∫–ª–∞–º–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>' + u.data + '</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b> –≤—Ä—É—á–Ω—É—é!', { parseMode: html })
            setState(uid, 0)
        }

        else if (u.state == 555 && isAdmin(uid)) {
            var sum = Number(text)
            var id = Number(u.data)
            var u = await getUser(id)
            await u.updateOne({ balance: sum })
            var u = await getUser(id)
            bot.sendMessage(id, 'üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b>!', { parseMode: html })
            bot.sendMessage(uid, 'üí≥ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b>!', { parseMode: html })
            await getUserMenu(uid, u)
            setState(uid, 0)
        }

        else if (u.state == 902 && isAdmin(uid)) {
            var sum = Number(text)
            addBal(u.data, sum)
            bot.sendMessage(d, 'üí≥ –í–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b>!', { parseMode: html })
            sendAdmins('üí≥ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>' + u.data + '</b> –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b> –≤—Ä—É—á–Ω—É—é!', { parseMode: html })
            setState(uid, 0)
        }

        else if (u.state == 906 && isAdmin(uid)) {
            var sum = Number(text)
            addAdvBal(u.data, sum)
            bot.sendMessage(d, 'üí≥ –í–∞—à —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b>!', { parseMode: html })
            sendAdmins('üí≥ –†–µ–∫–ª–∞–º–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>' + u.data + '</b> –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>' + Number(text) + '‚ÇΩ</b> –≤—Ä—É—á–Ω—É—é!', { parseMode: html })
            setState(uid, 0)
        }

        else if (u.state == 931 && isAdmin(uid)) {
            setState(uid, 0)
            var sum = Number(text)
            if (sum != 0) {
                var v_id = generateID(8)
                var v = new Voucher({ id: v_id, sum: sum, activated: false })
                await v.save()
                bot.sendMessage(uid, '–ß–µ–∫ —Å–æ–∑–¥–∞–Ω!\n\nhttp://t.me/' + config.bot_username + '?start=V' + v_id, { replyMarkup: RM_default, webPreview: true });
            } else bot.sendMessage(uid, '–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!', { replyMarkup: RM_default });
        }

        else if (u.state == 301) {
            if (!isNaN(text) && (Number(text) ^ 0) === Number(text) && Number(text) > 0) {
                if (Number(text) >= config.min_views) {
                    if (((Number(text)) * config.view_cost) <= u.adv_balance) {
                        setState(uid, 302)
                        setData(uid, Number(text))
                        bot.sendMessage(uid, '<b>' + text + '</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ‚úñÔ∏è <b>' + config.view_cost + '‚ÇΩ</b> <b>= ' + roundPlus((Number(text)) * config.view_cost) + '‚ÇΩ</b>\n\nüí¨ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è <b>–ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç</b>, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏:', { replyMarkup: RM_back, parseMode: html });
                    } else bot.sendMessage(uid, '<b>' + text + '</b> –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ ‚úñÔ∏è <b>' + config.view_cost + '‚ÇΩ</b> <b>= ' + roundPlus((Number(text)) * config.view_cost) + '‚ÇΩ</b>\n\n‚ùóÔ∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ:</b>', { replyMarkup: RM_back, parseMode: html });
                } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - ' + config.min_views + ' –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤!', { replyMarkup: RM_back, parseMode: html })
            } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!', { replyMarkup: RM_back, parseMode: html })
        }

        else if (u.state == 3001) {
            if (!isNaN(text) && (Number(text) ^ 0) === Number(text) && Number(text) > 0) {
                if (Number(text) >= config.min_bot) {
                    if (((Number(text)) * config.bot_cost) <= u.adv_balance) {
                        setState(uid, 3002)
                        setData(uid, Number(text))
                        bot.sendMessage(uid, '<b>' + text + '</b> –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ‚úñÔ∏è <b>' + config.bot_cost + '‚ÇΩ</b> <b>= ' + roundPlus((Number(text)) * config.bot_cost) + '‚ÇΩ</b>\n\nüí¨ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏:', { replyMarkup: RM_back, parseMode: html });
                    }
                    else bot.sendMessage(uid, '<b>' + text + '</b> –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ‚úñÔ∏è <b>' + config.bot_cost + '‚ÇΩ</b> <b>= ' + roundPlus((Number(text)) * config.bot_cost) + '‚ÇΩ</b>\n\n‚ùóÔ∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ:</b>', { replyMarkup: RM_back, parseMode: html });
                } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - ' + config.min_bot + ' –ø–µ—Ä–µ—Ö–æ–¥–æ–≤!', { replyMarkup: RM_back, parseMode: html })
            } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!', { replyMarkup: RM_back, parseMode: html })
        }

        else if (u.state == 3002) {
            text = text.replace("http://", "https://").replace("telegram.me", "t.me")
            if (~text.indexOf("https://t.me/")) {
                var url = text
                var bu = url.split("https://t.me/")[1].split("?start=")[0]
                if (url != "" && bu != "") {
                    setState(uid, 0)
                    var d = Number(u.data)
                    await bot.sendMessage(uid, "‚úÖ <b>–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b> ‚úÖ\n\nüí∏ –° –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ <b>" + roundPlus((d) * config.bot_cost) + '</b> —Ä—É–±–ª–µ–π', { replyMarkup: RM_default, parseMode: html })
                    var mid = await Bot.countDocuments({})
                    addAdvBal(uid, - ((d) * config.bot_cost))
                    let adv = new Bot({ id: mid, creator_id: uid, url: url, bot_username: bu, count: d, entered: 0, users: [], status: false })
                    await adv.save()
                    bot.sendMessage("@CashTronInfo", 'üí≥ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ <b>' + d + '</b> –ø–µ—Ä–µ—Ö–æ–¥–æ–≤', { parseMode: html, webPreview: false, replyMarkup: bot.inlineKeyboard([[bot.inlineButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –≤ CashTron", { url: "https://t.me/" + config.bot_username })]]) })
                    setData(uid, "")
                    incField(uid, "advSpend", d * config.bot_cost)
                } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://t.me/ZemoBot?start=' + uid + '!', { replyMarkup: RM_back, parseMode: html })
            } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–∞: https://t.me/ZemoBot?start=' + uid + '!', { replyMarkup: RM_back, parseMode: html })
        }

        else if (u.state == 201) {
            if (!isNaN(text) && (Number(text) ^ 0) === Number(text) && Number(text) > 0) {
                if (Number(text) >= config.min_subs) {
                    if (((Number(text)) * config.member_cost) <= u.adv_balance) {
                        setState(uid, 202)
                        setData(uid, Number(text))
                        bot.sendMessage(uid, '<b>' + text + '</b> –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚úñÔ∏è <b>' + config.member_cost + '‚ÇΩ</b> <b>= ' + roundPlus((Number(text)) * config.member_cost) + '‚ÇΩ</b>\n\nüí¨ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è <b>–¥–æ–±–∞–≤—å—Ç–µ</b> –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ @' + config.bot_username + ' <b>–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b> –í–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –∞ –∑–∞—Ç–µ–º <b>–ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞', { replyMarkup: RM_back, parseMode: html });
                    } else bot.sendMessage(uid, '<b>' + text + '</b> –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ‚úñÔ∏è <b>' + config.member_cost + '‚ÇΩ</b> <b>= ' + roundPlus((Number(text)) * config.member_cost) + '‚ÇΩ</b>\n\n‚ùóÔ∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ</b>', { replyMarkup: RM_back, parseMode: html });
                } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - ' + config.min_subs + ' –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!', { replyMarkup: RM_back, parseMode: html })
            } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!', { replyMarkup: RM_back, parseMode: html })
        }

        else if (u.state == 4001) {
            if (!isNaN(text) && (Number(text) ^ 0) === Number(text) && Number(text) > 0) {
                if (Number(text) >= config.min_group) {
                    if (((Number(text)) * config.group_cost) <= u.adv_balance) {
                        setState(uid, 4002)
                        setData(uid, Number(text))
                        bot.sendMessage(uid, '<b>' + text + '</b> —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚úñÔ∏è <b>' + config.group_cost + '‚ÇΩ</b> <b>= ' + roundPlus((Number(text)) * config.group_cost) + '‚ÇΩ</b>\n\nüí¨ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è <b>–¥–æ–±–∞–≤—å—Ç–µ</b> –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ @' + config.bot_username + ' <b>–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b> –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –∞ –∑–∞—Ç–µ–º <b>–æ—Ç–ø—Ä–∞–≤—å—Ç–µ</b> –µ—ë —é–∑–µ—Ä–Ω–µ–π–º:', { replyMarkup: RM_back, parseMode: html });
                    } else bot.sendMessage(uid, '<b>' + text + '</b> —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚úñÔ∏è <b>' + config.group_cost + '‚ÇΩ</b> <b>= ' + roundPlus((Number(text)) * config.group_cost) + '‚ÇΩ</b>\n\n‚ùóÔ∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ</b>', { replyMarkup: RM_back, parseMode: html });
                } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ - ' + config.min_group + ' —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!', { replyMarkup: RM_back, parseMode: html })
            } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!', { replyMarkup: RM_back, parseMode: html })
        }

        else if (u.state == 4002) {
            setState(uid, 0)
            var username = text.replace("@", "").replace("https://t.me/", "").replace("http://t.me/", "").replace("t.me/", "").replace("/", "")
            try {
                await bot.getChatMember("@" + username, config.bot_id).then(async function (value) {
                    if (value.status == 'administrator') {
                        var d = await getData(uid)
                        await bot.sendMessage(uid, "‚úÖ <b>–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b> ‚úÖ\n\nüí∏ –° –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ <b>" + roundPlus((d) * config.group_cost) + '‚ÇΩ</b>\n\n<i>‚ôªÔ∏è –í —Å–ª—É—á–∞–µ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ</i>', { replyMarkup: RM_default, parseMode: html })
                        var mid = await GMemb.countDocuments({})
                        addAdvBal(uid, - ((d) * config.group_cost))
                        var group = await bot.getChat("@" + username)
                        let adv = new GMemb({ id: mid++, creator_id: uid, members: d, entered: 0, users: [], channel: username, status: false, ch_id: group.id })
                        await adv.save()
                        bot.sendMessage("@CashTronInfo", 'üí≥ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ ' + d + ' –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É', { webPreview: false, replyMarkup: bot.inlineKeyboard([[bot.inlineButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –≤ CashTron", { url: "https://t.me/" + config.bot_username })]]) })
                        setData(uid, "")
                        incField(uid, "advSpend", d * config.group_cost)
                    }
                    else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—à –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã!', { replyMarkup: RM_default, parseMode: html })
                }).catch(function (e) { bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—à –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã!', { replyMarkup: RM_default, parseMode: html }) })
            }
            catch (e) { bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞—à –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã!', { replyMarkup: RM_default, parseMode: html }) }
        }

        else if (u.state == 911 && isAdmin(uid) && text != "0") {
            setState(uid, 0)
            bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
                if (text.split("#").length == 4) {
                    var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
                    var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
                    text = text.split("#")[0]
                    mm_t(text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)
                }
                else mm_t(text, e.message_id, e.chat.id, false, false, false, 100)
            })
        }

        else if (u.state == 961 && isAdmin(uid) && text != "0") {
            await User.findOneAndUpdate({ id: 0 }, { username: text })
            bot.sendMessage(uid, "–¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã –∏–∑–º–µ–Ω—ë–Ω!")
            setState(uid, 0)
        }

        else if (u.state == 99999 && u.ref_msg.status) {
            await User.findOneAndUpdate({ id: uid }, { "ref_msg.text": text })
            bot.sendMessage(uid, "üìù –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω—ë–Ω!", { replyMarkup: RM_back })
            setState(uid, 0)
        }

        else if (u.state == 5000) {
            var ud = await getData(uid)
            var size = Number(ud.split("_")[0])
            var sum = Number(ud.split("_")[1])
            var id = Math.ceil(Math.random() * 10000000)
            if (text.split("#").length == 4) {
                var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
                var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
                var kb = bot.inlineKeyboard([[bot.inlineButton(btn_text, { url: btn_link })], [bot.inlineButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", { callback: "mmaccept_" + id })], [bot.inlineButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", { callback: "cmm" })]])
                text = text.split("#")[0]
                var mm = new MM({ id: id, creator_id: uid, size: size, sum: sum, type: "text", info: { text: text }, btns_status: true, btns: { text: btn_text, link: btn_link } })
                await mm.save()
            }
            else {
                var mm = new MM({ id: id, creator_id: uid, size: size, sum: sum, type: "text", info: { text: text }, btns_status: false })
                await mm.save()
                var kb = bot.inlineKeyboard([[bot.inlineButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", { callback: "mmaccept_" + id })], [bot.inlineButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", { callback: "cmm" })]])
            }
            bot.sendMessage(uid, text, { replyMarkup: kb, parseMode: html })
        }


        else if (text.indexOf("/start") == -1) bot.sendMessage(uid, "üñ•", { replyMarkup: RM_default })

    }
})

bot.on('photo', async msg => {
    if (msg.from != undefined) {
        var uid = msg.from.id
        var u = await User.findOne({ id: uid })
        if (msg.from != undefined) {
            if (u.state == 911 && isAdmin(uid)) {
                setState(uid, 0)
                var text = ""
                if (msg.caption != undefined) text = msg.caption
                bot.sendMessage(uid, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!").then((e) => {
                    if (text.split("#").length == 4) {
                        var btn_text = text.split("#")[1].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
                        var btn_link = text.split("#")[2].split("#")[0].replace(/(^\s*)|(\s*)$/g, '')
                        text = text.split("#")[0].replace(/(^\s*)|(\s*)$/g, '').replace(' ', '')
                        mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, true, btn_text, btn_link, 100)
                    } else mm_img(msg.photo[msg.photo.length - 1].file_id, text, e.message_id, e.chat.id, false, false, false, 100)
                })
            }
        }
    }
})

bot.on('callbackQuery', async msg => {
    if (msg.from != undefined) {
        var uid = msg.from.id

        if (msg.data.indexOf("prav") == -1)
            var u = await User.findOne({ id: uid })
        let dt = new Date
        console.log("[" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + msg.from.id + " –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–ª–±—ç–∫: " + msg.data)
        if (isNaN(msg.data) == false) {
            var d = Number(msg.data)
            var vb = await Views.find({ id: d })
            var viewed = vb[0].viewed
            var views = vb[0].views
            var usrs = vb[0].users
            if (vb[0].status != true) {
                if (usrs.indexOf(uid) == -1) {
                    usrs[viewed] = uid
                    Views.findOneAndUpdate({ id: d }, { viewed: viewed + 1, users: usrs }, { upsert: true }, function (err, doc) { });
                    bot.answerCallbackQuery(msg.id, { text: `–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${config.view_pay}‚ÇΩ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è!` })
                    addBal(uid, config.view_pay)
                    let r1 = await getReferer(uid, 1)
                    let r2 = await getReferer(uid, 2)
                    addBal(r1, config.view_pay * config.ref1_percent)
                    addBal(r2, config.view_pay * config.ref2_percent)
                    incField(r1, "ref1earnings", config.view_pay * config.ref1_percent)
                    incField(r2, "ref2earnings", config.view_pay * config.ref2_percent)
                    incField(uid, "viewsCount", 1)
                    if ((viewed + 1) == views) {
                        bot.deleteMessage("@" + config.bot_views_channel, vb[0].msg_id).catch((e) => { sendAdmins("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #" + vb[0].creator_id + " –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n–í —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ—Å—Ç—ã –ø–æ–∑–¥–Ω–µ–µ 48 —á–∞—Å–æ–≤, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—Å—Ç—ã –≤—Ä—É—á–Ω—É—é:\nhttps://t.me/" + config.bot_views_channel + "/" + vb[0].msg_id + "\nhttps://t.me/" + config.bot_views_channel + "/" + (vb[0].msg_id - 1)) })
                        bot.deleteMessage("@" + config.bot_views_channel, (vb[0].msg_id - 1)).catch((e) => { console.log(e) })
                        bot.sendMessage(vb[0].creator_id, '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ ' + views + ' –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–∞ t.me/' + vb[0].channel + '/' + vb[0].c_msg_id + ' –≤—ã–ø–æ–ª–Ω–µ–Ω!', {});
                        await Views.findOneAndUpdate({ id: vb[0].id }, { status: true })
                    }
                }
                else bot.answerCallbackQuery(msg.id, { text: `–í—ã —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç!` })
            }
            else bot.answerCallbackQuery(msg.id, { text: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!' })
        }
        else {
            var d = msg.data
            var parts = d.split("_")
            if (d.split("_")[0] == 'check') {
                if (d.split("_")[1] != undefined) {
                    var utid = d.split("_")[1]
                    var task = await Memb.find({ id: utid })
                    await bot.getChatMember(task[0].ch_id, uid).catch((e) => {
                        bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í—ã –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª!', { replyMarkup: RM_default, parseMode: html });

                    }).then(async (e) => {
                        if (e != undefined) {
                            if (e.status != 'left') {
                                let tt = await Memb.find({ id: utid, users: { $ne: uid }, status: false })
                                if (tt[0] != undefined && tt != null) {
                                    let um = tt[0].users
                                    um.push(uid)
                                    if ((tt[0].entered + 1) < tt[0].members)
                                        await Memb.findOneAndUpdate({ 'id': utid }, { entered: (tt[0].entered + 1), users: um })
                                    else {
                                        await Memb.findOneAndUpdate({ 'id': utid }, { entered: (tt[0].entered + 1), users: um, status: true })
                                        bot.sendMessage(tt[0].creator_id, '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ ' + tt[0].members + ' –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –∫–∞–Ω–∞–ª @' + tt[0].channel + ' –≤—ã–ø–æ–ª–Ω–µ–Ω!');
                                    }
                                    addBal(uid, config.member_pay)
                                    bot.deleteMessage(uid, msg.message.message_id)
                                    bot.sendMessage(uid, 'üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>' + (config.member_pay * 100) + ' –∫–æ–ø–µ–µ–∫</b> –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª!', { parseMode: html })
                                    let subs = new Subs({ uid: uid, type: "channel", ch_id: task[0].ch_id, exp_timestamp: (new Date()).getTime() + 86400000 * config.min_subs_time, fee_status: 0, creator_id: tt[0].creator_id })
                                    await subs.save()
                                    let r1 = await getReferer(uid, 1)
                                    let r2 = await getReferer(uid, 2)
                                    addBal(r1, config.member_pay * config.ref1_percent)
                                    addBal(r2, config.member_pay * config.ref2_percent)
                                    incField(r1, "ref1earnings", config.member_pay * config.ref1_percent)
                                    incField(uid, "subsCount", 1)
                                    incField(r2, "ref2earnings", config.member_pay * config.ref2_percent)
                                } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!', { replyMarkup: RM_default, parseMode: html });
                            } else
                                bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í—ã –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª!', { replyMarkup: RM_default, parseMode: html });
                        } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!', { replyMarkup: RM_default, parseMode: html });
                    })
                }
            }
            else if (d.split("_")[0] == 'check3') {
                if (d.split("_")[1] != undefined) {
                    var utid = d.split("_")[1]
                    var task = await GMemb.find({ id: utid })
                    await bot.getChatMember("@" + task[0].channel, uid).catch((e) => {
                        bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í—ã –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É!', { replyMarkup: RM_default, parseMode: html });
                    }).then(async (e) => {
                        if (e != undefined) {
                            if (e.status != 'left') {
                                let tt = await GMemb.find({ id: utid, users: { $ne: uid }, status: false })
                                if (tt[0] != undefined && tt != null) {
                                    let um = tt[0].users
                                    um.push(uid)
                                    if ((tt[0].entered + 1) < tt[0].members) await GMemb.findOneAndUpdate({ 'id': utid }, { entered: (tt[0].entered + 1), users: um })
                                    else {
                                        await GMemb.findOneAndUpdate({ 'id': utid }, { entered: (tt[0].entered + 1), users: um, status: true })
                                        bot.sendMessage(tt[0].creator_id, '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ ' + tt[0].members + ' —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É @' + tt[0].channel + ' –≤—ã–ø–æ–ª–Ω–µ–Ω!');
                                    }
                                    addBal(uid, config.group_pay)
                                    bot.deleteMessage(uid, msg.message.message_id)
                                    bot.sendMessage(uid, 'üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>' + (config.group_pay * 100) + ' –∫–æ–ø–µ–µ–∫</b> –∑–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É!', { parseMode: html })
                                    let subs = new Subs({ uid: uid, type: "group", ch_id: task[0].ch_id, exp_timestamp: (new Date()).getTime() + 86400000 * config.min_subs_time, fee_status: 0, creator_id: tt[0].creator_id })
                                    await subs.save()
                                    let r1 = await getReferer(uid, 1)
                                    let r2 = await getReferer(uid, 2)
                                    addBal(r1, config.group_pay * config.ref1_percent)
                                    addBal(r2, config.group_pay * config.ref2_percent)
                                    incField(r1, "ref1earnings", config.group_pay * config.ref1_percent)
                                    incField(uid, "groupsCount", 1)
                                    incField(r2, "ref2earnings", config.group_pay * config.ref2_percent)
                                } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!', { replyMarkup: RM_default, parseMode: html });
                            } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–í—ã –Ω–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É!', { replyMarkup: RM_default, parseMode: html });
                        } else bot.sendMessage(uid, '‚ùóÔ∏è<b>–û—à–∏–±–∫–∞</b>‚ùóÔ∏è\n\n–ó–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!', { replyMarkup: RM_default, parseMode: html });
                    })
                }
            }

            else if (d == "top_refs") {
                var top = await User.find({ id: { $ne: 0 } }).sort({ "ref_count": -1 }).limit(10)
                var str = "üë• <b>–¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤</b>\n\n"
                for (var i = 0; i < top.length; i++)
                    str += (i + 1) + ') <a href="tg://user?id=' + top[i].id + '">' + top[i].name + "</a> - " + top[i].ref_count + " —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
                await bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, str)
            }

            else if (d == "top_po") {
                var top = await User.find({ id: { $ne: 0 } }).sort({ "total_earned": -1 }).limit(10)
                var str = "üí∏ <b>–¢–æ–ø –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É</b>\n\n"
                for (var i = 0; i < top.length; i++)
                    str += (i + 1) + ') <a href="tg://user?id=' + top[i].id + '">' + top[i].name + "</a> - " + top[i].total_earned + "‚ÇΩ\n"
                await bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, str)
            }

            else if (d == "branch_15") {
                if (!u.statuses[0]) return bot.answerCallbackQuery(msg.id, { text: "‚ùï –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç—É –≤–µ—Ç–∫—É" })
                bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, `
ü•á <b>–í–ï–¢–ö–ê 15</b>

–ù–∞ –¥–∞–Ω–Ω–æ–π –í–ï–¢–ö–ï –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–∞–∫–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è: 
—Å 1-–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ 5‚ÇΩ 
—Å 2-–æ–≥–æ –ø–æ 10-—ã–π —É—Ä–æ–≤–Ω–∏ –ø–æ 1‚ÇΩ 
–û—Ç –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∏–∂–µ

‚≠ïÔ∏è  –í –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: ${u.b15counts.reduce((a, b) => a + b)} —á–µ–ª–æ–≤–µ–∫(–∞)
–í–∞—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
${u.b15counts[0] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 1 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[0]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[0] * 5}‚ÇΩ)
${u.b15counts[1] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 2 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[1]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[1]}‚ÇΩ)
${u.b15counts[2] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 3 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[2]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[2]}‚ÇΩ)
${u.b15counts[3] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 4 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[3]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[3]}‚ÇΩ)
${u.b15counts[4] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 5 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[4]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[4]}‚ÇΩ)
${u.b15counts[5] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 6 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[5]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[5]}‚ÇΩ)
${u.b15counts[6] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 7 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[6]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[6]}‚ÇΩ)
${u.b15counts[7] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 8 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[7]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[7]}‚ÇΩ)
${u.b15counts[8] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 9 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[8]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[8]}‚ÇΩ)
${u.b15counts[9] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 10 —É—Ä–æ–≤–µ–Ω—å - ${u.b15counts[9]} —á–µ–ª–æ–≤–µ–∫ (${u.b15counts[9]}‚ÇΩ)
`)
            }

            else if (d == "branch_150") {
                if (!u.statuses[1]) return bot.answerCallbackQuery(msg.id, { text: "‚ùï –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç—É –≤–µ—Ç–∫—É" })
                bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, `
ü•à <b>–í–ï–¢–ö–ê 150</b>

–ù–∞ –¥–∞–Ω–Ω–æ–π –í–ï–¢–ö–ï –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–∞–∫–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è: 
—Å 1-–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ 50‚ÇΩ 
—Å 2-–æ–≥–æ –ø–æ 10-—ã–π —É—Ä–æ–≤–Ω–∏ –ø–æ 10‚ÇΩ 
–û—Ç –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∏–∂–µ

‚≠ïÔ∏è  –í –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: ${u.b150counts.reduce((a, b) => a + b)} —á–µ–ª–æ–≤–µ–∫(–∞)
–í–∞—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
${u.b150counts[0] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 1 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[0]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[0] * 50}‚ÇΩ)
${u.b150counts[1] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 2 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[1]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[1] * 10}‚ÇΩ)
${u.b150counts[2] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 3 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[2]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[2] * 10}‚ÇΩ)
${u.b150counts[3] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 4 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[3]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[3] * 10}‚ÇΩ)
${u.b150counts[4] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 5 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[4]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[4] * 10}‚ÇΩ)
${u.b150counts[5] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 6 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[5]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[5] * 10}‚ÇΩ)
${u.b150counts[6] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 7 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[6]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[6] * 10}‚ÇΩ)
${u.b150counts[7] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 8 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[7]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[7] * 10}‚ÇΩ)
${u.b150counts[8] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 9 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[8]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[8] * 10}‚ÇΩ)
${u.b150counts[9] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 10 —É—Ä–æ–≤–µ–Ω—å - ${u.b150counts[9]} —á–µ–ª–æ–≤–µ–∫ (${u.b150counts[9] * 10}‚ÇΩ)
`)
            }

            else if (d == "branch_1500") {
                if (!u.statuses[2]) return bot.answerCallbackQuery(msg.id, { text: "‚ùï –í—ã –µ—â—ë –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç—É –≤–µ—Ç–∫—É" })
                bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, `
ü•â <b>–í–ï–¢–ö–ê 1500</b>

–ù–∞ –¥–∞–Ω–Ω–æ–π –í–ï–¢–ö–ï –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ç–∞–∫–∏–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è: 
—Å 1-–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ 500‚ÇΩ 
—Å 2-–æ–≥–æ –ø–æ 10-—ã–π —É—Ä–æ–≤–Ω–∏ –ø–æ 100‚ÇΩ 
–û—Ç –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, —É–∫–∞S–∑–∞–Ω–Ω–æ–π –Ω–∏–∂–µ

‚≠ïÔ∏è  –í –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: ${u.b1500counts.reduce((a, b) => a + b)} —á–µ–ª–æ–≤–µ–∫(–∞)
–í–∞—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
${u.b1500counts[0] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 1 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[0]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[0] * 500}‚ÇΩ)
${u.b1500counts[1] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 2 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[1]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[1] * 100}‚ÇΩ)
${u.b1500counts[2] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 3 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[2]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[2] * 100}‚ÇΩ)
${u.b1500counts[3] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 4 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[3]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[3] * 100}‚ÇΩ)
${u.b1500counts[4] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 5 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[4]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[4] * 100}‚ÇΩ)
${u.b1500counts[5] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 6 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[5]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[5] * 100}‚ÇΩ)
${u.b1500counts[6] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 7 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[6]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[6] * 100}‚ÇΩ)
${u.b1500counts[7] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 8 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[7]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[7] * 100}‚ÇΩ)
${u.b1500counts[8] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 9 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[8]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[8] * 100}‚ÇΩ)
${u.b1500counts[9] > 0 ? "‚úÖÔ∏è" : "‚òëÔ∏è"} 10 —É—Ä–æ–≤–µ–Ω—å - ${u.b1500counts[9]} —á–µ–ª–æ–≤–µ–∫ (${u.b1500counts[9] * 100}‚ÇΩ)
`)
            }

            else if (d == "buy_15") {
                if (u.statuses[0]) return bot.answerCallbackQuery(msg.id, { text: "‚ùï –í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç—É –≤–µ—Ç–∫—É" })
                bot.editMessageText({
                    chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton(`ü•ù QIWI`, { callback: "buy_15_qiwi" }), bot.inlineButton(`üÖøÔ∏è Payeer`, { callback: "buy_15_payeer" })]
                    ])
                }, `
üî¥ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é ü•á –í–ï–¢–ö–ò 15</b>

üí∏ <b>–û—Ç—á–µ—Ç—ã –≤—ã–ø–ª–∞—Ç:</b> @ZemoChannel
–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!

üî∞ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å - —Å–¥–µ–ª–∞–π—Ç–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—É–º–º–æ–π –≤ —Ä–∞–∑–º–µ—Ä–µ 15‚ÇΩ —É–¥–æ–±–Ω—ã–º –í–∞–º —Å–ø–æ—Å–æ–±–æ–º

üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>
`)
            }
            else if (d == "buy_15_qiwi") {
                bot.editMessageText({
                    chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton(`‚óÄÔ∏è –ù–∞–∑–∞–¥`, { callback: "buy_15" })]
                    ])
                }, `
üî∞ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ü•á –í–ï–¢–ö–ò 15 –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 15‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ QIWI: <code>${config.qiwi_num}</code>
üí¨ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: <code>–í15_${uid}</code>

‚ô®Ô∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

ü§¶üèª‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ - –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ @Licifersss

‚è± –ü–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –í–µ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã, –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
`)
            }
            else if (d == "buy_15_payeer") {
                bot.editMessageText({
                    chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton(`‚óÄÔ∏è –ù–∞–∑–∞–¥`, { callback: "buy_15" })]
                    ])
                }, `
üî∞ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ü•á –í–ï–¢–ö–ò 15 –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 15‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ Payeer: <code>${config.payeer_num}</code>
üí¨ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: <code>–í15_${uid}</code>

‚ô®Ô∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

ü§¶üèª‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ - –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ @Licifersss

‚è± –ü–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –í–µ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã, –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
`)
            }



            else if (d == "buy_150") {
                if (u.statuses[1]) return bot.answerCallbackQuery(msg.id, { text: "‚ùï –í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç—É –≤–µ—Ç–∫—É" })
                bot.editMessageText({
                    chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton(`ü•ù QIWI`, { callback: "buy_150_qiwi" }), bot.inlineButton(`üÖøÔ∏è Payeer`, { callback: "buy_150_payeer" })]
                    ])
                }, `
üî¥ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é ü•à –í–ï–¢–ö–ò 150</b>

üí∏ <b>–û—Ç—á–µ—Ç—ã –≤—ã–ø–ª–∞—Ç:</b> @ZemoChannel
–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!

üî∞ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å - —Å–¥–µ–ª–∞–π—Ç–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—É–º–º–æ–π –≤ —Ä–∞–∑–º–µ—Ä–µ 150‚ÇΩ —É–¥–æ–±–Ω—ã–º –í–∞–º —Å–ø–æ—Å–æ–±–æ–º

üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>
`)
            }
            else if (d == "buy_150_qiwi") {
                bot.editMessageText({
                    chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton(`‚óÄÔ∏è –ù–∞–∑–∞–¥`, { callback: "buy_150" })]
                    ])
                }, `
üî∞ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ü•à –í–ï–¢–ö–ò 150 –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 150‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ QIWI: <code>${config.qiwi_num}</code>
üí¨ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: <code>–í150_${uid}</code>

‚ô®Ô∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

ü§¶üèª‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ - –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ @Licifersss

‚è± –ü–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –í–µ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã, –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
`)
            }
            else if (d == "buy_150_payeer") {
                bot.editMessageText({
                    chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton(`‚óÄÔ∏è –ù–∞–∑–∞–¥`, { callback: "buy_150" })]
                    ])
                }, `
üî∞ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ü•à –í–ï–¢–ö–ò 150 –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 150‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ Payeer: <code>${config.payeer_num}</code>
üí¨ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: <code>–í150_${uid}</code>

‚ô®Ô∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

ü§¶üèª‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ - –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ @Licifersss 

‚è± –ü–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –í–µ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã, –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
`)
            }


            else if (d == "buy_1500") {
                if (u.statuses[2]) return bot.answerCallbackQuery(msg.id, { text: "‚ùï –í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç—É –≤–µ—Ç–∫—É" })
                bot.editMessageText({
                    chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton(`ü•ù QIWI`, { callback: "buy_1500_qiwi" }), bot.inlineButton(`üÖøÔ∏è Payeer`, { callback: "buy_1500_payeer" })]
                    ])
                }, `
üî¥ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é ü•â –í–ï–¢–ö–ò 1500</b>

üí∏ <b>–û—Ç—á–µ—Ç—ã –≤—ã–ø–ª–∞—Ç:</b> @ZemoChannel
–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ–ª—É—á–∞—é—Ç –≤—ã–ø–ª–∞—Ç—ã –¥—Ä—É–≥–∏–µ –Ω–∞—à–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏!

üî∞ –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å - —Å–¥–µ–ª–∞–π—Ç–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—É–º–º–æ–π –≤ —Ä–∞–∑–º–µ—Ä–µ 1500‚ÇΩ —É–¥–æ–±–Ω—ã–º –í–∞–º —Å–ø–æ—Å–æ–±–æ–º

üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>
`)
            }
            else if (d == "buy_1500_qiwi") {
                bot.editMessageText({
                    chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton(`‚óÄÔ∏è –ù–∞–∑–∞–¥`, { callback: "buy_1500" })]
                    ])
                }, `
üî∞ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ü•â –í–ï–¢–ö–ò 1500 –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 1500‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ QIWI: <code>${config.qiwi_num}</code>
üí¨ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: <code>–í1500_${uid}</code>

‚ô®Ô∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

ü§¶üèª‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ - –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ @Licifersss

‚è± –ü–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –í–µ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã, –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
`)
            }
            else if (d == "buy_1500_payeer") {
                bot.editMessageText({
                    chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([
                        [bot.inlineButton(`‚óÄÔ∏è –ù–∞–∑–∞–¥`, { callback: "buy_1500" })]
                    ])
                }, `
üî∞ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ü•â –í–ï–¢–ö–ò 1500 –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 1500‚ÇΩ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ Payeer: <code>${config.payeer_num}</code>
üí¨ –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥: <code>–í1500_${uid}</code>

‚ô®Ô∏è –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

ü§¶üèª‚Äç‚ôÇÔ∏è –ï—Å–ª–∏ –í—ã –∑–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ - –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ @Licifersss

‚è± –ü–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –í–µ—Ç–∫–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã, –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
`)
            }



            else if (d == "prom_7") {
                bot.deleteMessage(uid, msg.message.message_id)
                bot.sendMessage(uid, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { replyMarkup: RM_atasks, parseMode: html });
            }
            else if (d == "at_create") {
                bot.deleteMessage(uid, msg.message.message_id)
                bot.sendMessage(msg.from.id, '–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:', { replyMarkup: RM_tt, parseMode: 'markdown', webPreview: false });
                state[msg.from.id] = 69;
            }
            else if (d == "at_my") {
                bot.deleteMessage(uid, msg.message.message_id)
                var tm = await Task.find({ creator_id: msg.from.id, status: false })
                if (tm.length == 0)
                    bot.sendMessage(msg.from.id, 'üòû –í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–π', { replyMarkup: RM_default, parseMode: 'markdown', webPreview: false });
                else {
                    await bot.sendMessage(msg.from.id, '–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:', { replyMarkup: RM_default, parseMode: 'markdown', webPreview: false });
                    for (var i = 0; i < tm.length; i++) {
                        var task = tm[i]
                        if (task.type == 'autoreport') { var Markup = bot.inlineKeyboard([[bot.inlineButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', { callback: 'editd_' + task.id })], [bot.inlineButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å URL', { callback: 'editurl_' + task.id })], [bot.inlineButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç', { callback: 'editansw_' + task.id })], [bot.inlineButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', { callback: 'deltask_' + task.id })]]) }
                        if (task.type == 'handscr') { var Markup = bot.inlineKeyboard([[bot.inlineButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', { callback: 'editd_' + task.id })], [bot.inlineButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å URL', { callback: 'editurl_' + task.id })], [bot.inlineButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞', { callback: 'editscr_' + task.id })], [bot.inlineButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', { callback: 'deltask_' + task.id })]]) }
                        if (task.type == 'handreport') { var Markup = bot.inlineKeyboard([[bot.inlineButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', { callback: 'editd_' + task.id })], [bot.inlineButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å URL', { callback: 'editurl_' + task.id })], [bot.inlineButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', { callback: 'deltask_' + task.id })]]) }
                        if (task.type == 'handscr') await bot.sendMessage(msg.from.id, '<b>ID –∑–∞–¥–∞–Ω–∏—è: </b>' + task.id + '\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n' + task.descr + '\n\n<b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: </b>—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞\n<b>URL —Ä–µ—Å—É—Ä—Å–∞: </b>' + task.url + '\n<b>–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: </b>' + task.pay + '‚ÇΩ\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>' + task.wcnt + ' –∏–∑ ' + task.cnt + '</b> —Ä–∞–∑', { webPreview: false, parseMode: "html", replyMarkup: Markup });
                        if (task.type == 'handreport') await bot.sendMessage(msg.from.id, '<b>ID –∑–∞–¥–∞–Ω–∏—è: </b>' + task.id + '\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n' + task.descr + '\n\n<b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: </b>—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á—ë—Ç–∞\n<b>URL —Ä–µ—Å—É—Ä—Å–∞: </b>' + task.url + '\n<b>–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: </b>' + task.pay + '‚ÇΩ\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>' + task.wcnt + ' –∏–∑ ' + task.cnt + '</b> —Ä–∞–∑', { webPreview: false, parseMode: "html", replyMarkup: Markup });
                        if (task.type == 'autoreport') await bot.sendMessage(msg.from.id, '<b>ID –∑–∞–¥–∞–Ω–∏—è: </b>' + task.id + '\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n' + task.descr + '\n\n<b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: </b>–∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á—ë—Ç–∞\n<b>–û—Ç–≤–µ—Ç: </b>' + task.img + '\n<b>URL —Ä–µ—Å—É—Ä—Å–∞: </b>' + task.url + '\n<b>–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: </b>' + task.pay + '‚ÇΩ\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>' + task.wcnt + ' –∏–∑ ' + task.cnt + '</b> —Ä–∞–∑', { webPreview: false, parseMode: "html", replyMarkup: Markup });
                    }
                }
            }

            else if (d == "watchtasks") {
                var task = await Task.find({ status: false, workers: { $nin: [msg.from.id] } }).limit(1)
                bot.deleteMessage(uid, msg.message.message_id)
                if (task[0] != null && task[0] != undefined) {
                    task = task[0]
                    if (task.type == 'handscr') var Markup = bot.inlineKeyboard([[bot.inlineButton('üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', { url: task.url })], [bot.inlineButton('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', { callback: 'send_' + task.id })], [bot.inlineButton('üñº –ü—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞', { callback: 'img_' + task.img })], [bot.inlineButton('‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', { callback: 'atskip' })]])
                    else var Markup = bot.inlineKeyboard([[bot.inlineButton('üîó –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', { url: task.url })], [bot.inlineButton('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', { callback: 'send_' + task.id })], [bot.inlineButton('‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', { callback: 'atskip' })]])
                    if (task.type == 'handscr') var tstr = '—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞'
                    if (task.type == 'handreport') var tstr = '—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á—ë—Ç–∞'
                    if (task.type == 'autoreport') var tstr = '–∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á—ë—Ç–∞'
                    await bot.sendMessage(msg.from.id, '<b>ID –∑–∞–¥–∞–Ω–∏—è: </b>' + task.id + '\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n' + task.descr + '\n\n<b>–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: </b>' + tstr + '\n<b>URL —Ä–µ—Å—É—Ä—Å–∞: </b>' + task.url + '\n<b>–û–ø–ª–∞—Ç–∞: </b>' + task.pay + '‚ÇΩ', { replyMarkup: Markup, webPreview: false, parseMode: "html" });
                }
                else
                    bot.sendMessage(msg.from.id, 'üòû –ó–∞–¥–∞–Ω–∏—è –∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ', { parseMode: 'markdown' })
            }

            else if (d.split("_")[0] == 'mm') {
                var size = d.split("_")[1]
                var sum = Number(d.split("_")[2])
                var bu = await User.countDocuments({})
                if (u.adv_balance >= sum) {
                    bot.deleteMessage(uid, msg.message.message_id)
                    bot.sendMessage(uid, `–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ <b>${size}%</b> –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - <b>${Math.ceil(bu * roundPlus(size / 100))}</b> —á–µ–ª–æ–≤–µ–∫ –∑–∞ <b>${sum}‚ÇΩ</b>` + "\n\n–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:</i>\n# –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ # http://t.me/link #", { replyMarkup: RM_back, parseMode: html });
                    setData(uid, size + "_" + sum)
                    setState(uid, 5000)
                }
                else bot.answerCallbackQuery(msg.id, { text: "‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ!", showAlert: true })
            }

            else if (d.split("_")[0] == 'accept') {
                var id = d.split("_")[1]
                var sum = d.split("_")[2]
                var wallet = d.split("_")[3]
                bot.sendMessage(id, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\nüí∏ <b>${sum}</b> —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—á–µ–Ω–æ –Ω–∞ –∫–æ—à–µ–ª—ë–∫ <b>${wallet}</b>!`, { parseMode: html });
                incField(id, "payOut", sum)
                await bot.sendMessage("@CashTronVip", `
‚ö´Ô∏è <b><a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a></b> —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª <b>${sum} —Ä—É–±–ª–µ–π</b> –Ω–∞ QIWI –∫–æ—à–µ–ª–µ–∫
ü§ñ <b>–ë–æ—Ç: </b>@ZemoBot
`, { parseMode: html })
                //fs.unlinkSync(chequeFile)
                // fs.unlinkSync(chequeCroppedFile)
                // fs.unlinkSync(chequePublicFile)

                bot.deleteMessage(uid, msg.message.message_id)
                await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: sum } })
            }

            else if (d == "prom_4") {
                var bu = await User.countDocuments({})
                var ik = bot.inlineKeyboard([
                    [bot.inlineButton(`25% –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - ${Math.ceil(bu * 0.25)} —á–µ–ª–æ–≤–µ–∫ - ${Math.ceil(bu * 0.25 * config.massmailing_kf)}‚ÇΩ`, { callback: "mm_25_" + Math.ceil(bu * 0.25 * config.massmailing_kf) })],
                    [bot.inlineButton(`50% –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - ${Math.ceil(bu * 0.5)} —á–µ–ª–æ–≤–µ–∫ - ${Math.ceil(bu * 0.5 * config.massmailing_kf)}‚ÇΩ`, { callback: "mm_50_" + Math.ceil(bu * 0.5 * config.massmailing_kf) })],
                    [bot.inlineButton(`75% –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - ${Math.ceil(bu * 0.75)} —á–µ–ª–æ–≤–µ–∫ - ${Math.ceil(bu * 0.75 * config.massmailing_kf)}‚ÇΩ`, { callback: "mm_75_" + Math.ceil(bu * 0.75 * config.massmailing_kf) })],
                    [bot.inlineButton(`100% –∞—É–¥–∏—Ç–æ—Ä–∏–∏ - ${Math.ceil(bu * 1)} —á–µ–ª–æ–≤–µ–∫ - ${Math.ceil(bu * 1 * config.massmailing_kf)}‚ÇΩ`, { callback: "mm_100_" + Math.ceil(bu * 1 * config.massmailing_kf) })],
                    [bot.inlineButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", { callback: "prom_main" })]])

                bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: ik }, `‚úâÔ∏è <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:</b>\n\n<b>–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>`)

            }
            else if (d == "prom_5") {
                var price = Math.ceil((await bot.getChatMembersCount("@" + config.bot_views_channel)) * config.pin_kf)
                bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: RM_pin }, `üìå –ù–∞—à –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –í–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–π –ø–æ—Å—Ç –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ @${config.bot_views_channel} –∑–∞ <b>${price}‚ÇΩ</b>\n\n–°—Ö–µ–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è - <b>–∞—É–∫—Ü–∏–æ–Ω–Ω–∞—è</b>. –í–∞—à –ø–æ—Å—Ç –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∑–∞–∫—Ä–µ–ø–µ –∫–∞–Ω–∞–ª–∞, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π –Ω–µ –æ–ø–ª–∞—Ç–∏—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ\n\n<b>–í–∞—à –ø–æ—Å—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞!</b>`)
            }
            else if (d == "prom_pin") {
                var price = Math.ceil((await bot.getChatMembersCount("@" + config.bot_views_channel)) * config.pin_kf)
                if (u.adv_balance >= price) {
                    bot.deleteMessage(uid, msg.message.message_id)
                    bot.sendMessage(uid, "üì¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ:", { replyMarkup: RM_back })
                    setState(uid, 1100)
                }
                else bot.answerCallbackQuery(msg.id, { text: "‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ!", showAlert: true })
            }
            else if (d == "prom_6") {
                bot.deleteMessage(uid, msg.message.message_id)
                bot.sendMessage(uid, 'ü§ñ <b>–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –í–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–∫—Ä—É—Ç–∫–∏ –ª—é–±—ã—Ö –±–æ—Ç–æ–≤</b>\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ - <b>' + config.bot_cost * 100 + ' –∫–æ–ø–µ–π–∫–∏</b>\nüí∞ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ <b>' + await getRoundedBal(uid) + ' </b>—Ä—É–±–ª–µ–π\nüìä –ò—Ö —Ö–≤–∞—Ç–∏—Ç –Ω–∞ <b>' + Math.floor(await getRoundedBal(uid) / config.bot_cost) + ' </b>–ø–µ—Ä–µ—Ö–æ–¥–æ–≤\n\nüìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–∂–æ–≤:', { replyMarkup: RM_back, parseMode: html });
                setState(uid, 3001)
            }


            else if (d == "ref_msg") {
                if (!u.ref_msg.status)
                    await bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([[bot.inlineButton("üí≥ –ö—É–ø–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é", { callback: "ref_msg_buy" })]]) }, `
‚úâÔ∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> - —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—é—Ç –≤—Å–µ –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –±–æ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª—é–±—É—é —Ä–µ–∫–ª–∞–º—É\n
üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>${config.ref_msg_cost}‚ÇΩ</b>\n
<i>üìù –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –í—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è</i>`)
                else
                    await bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html, replyMarkup: bot.inlineKeyboard([[bot.inlineButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", { callback: "ref_msg_edit" })]]) }, `
‚úâÔ∏è <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> - —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—é—Ç –≤—Å–µ –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –±–æ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª—é–±—É—é —Ä–µ–∫–ª–∞–º—É\n
‚úÖ <b>–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—á–µ–Ω–∞!</b>\n
üóí <b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b>\n${u.ref_msg.text}`)
            }

            else if (d == "ref_msg_buy") {
                console.log("ok")
                if (u.adv_balance >= config.ref_msg_cost) {
                    bot.deleteMessage(uid, msg.message.message_id)
                    await addAdvBal(uid, -config.ref_msg_cost)
                    bot.sendMessage(uid, "‚úÖ –§—É–Ω–∫—Ü–∏—è –∫—É–ø–ª–µ–Ω–∞!", { replyMarkup: RM_default })
                    await User.findOneAndUpdate({ id: uid }, { "ref_msg.status": true, "ref_msg.text": "üñê –ü—Ä–∏–≤–µ—Ç, —É–¥–∞—á–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞!\n\n<i>   –¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–µ—Ä</i>" })
                }
                else bot.answerCallbackQuery(msg.id, { text: "‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ!", showAlert: true })
            }

            else if (d == "ref_msg_edit" && u.ref_msg.status) {
                bot.deleteMessage(uid, msg.message.message_id)
                bot.sendMessage(uid, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:", { replyMarkup: RM_back })
                setState(uid, 99999)
            }


            else if (d == "bal_1")
                bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, 'üê• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é QIWI:</b>\n\n–ö–æ—à–µ–ª—ë–∫: <code>' + config.qiwi_num + '</code>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>' + uid + '</code>\n\n<b>‚ùóÔ∏èÔ∏è –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É: </b>@CashTron\n\n<b>‚ùóÔ∏èÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É, –∏–Ω–∞—á–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –ø—Ä–∏–¥—É—Ç! </b>‚ùóÔ∏èÔ∏è')

            else if (d == "bal_2") {
                bot.deleteMessage(uid, msg.message.message_id)
                bot.sendMessage(uid, `
üí∏ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${u.balance}‚ÇΩ
‚≠ïÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 5‚ÇΩ
üî∞ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –∫–æ–º–∏—Å—Å–∏–π –Ω–∞ –≤—ã–≤–æ–¥ –ù–ï–¢!
                
üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:</b>`, {
                    replyMarkup: bot.inlineKeyboard([[
                        bot.inlineButton(`ü•ù QIWI`, { callback: "po_qiwi" }), bot.inlineButton(`üÖøÔ∏è Payeer`, { callback: "po_payeer" })
                    ]]), parseMode: html
                });
            }

            else if (d == "po_qiwi") {
                bot.deleteMessage(uid, msg.message.message_id)
                setState(uid, 100)
                bot.sendMessage(uid, `
‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ QIWI –∫–æ—à–µ–ª–µ–∫–∞, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: +380633456789
`, { replyMarkup: RM_back, parseMode: html });
            }

            else if (d == "po_payeer") {
                bot.deleteMessage(uid, msg.message.message_id)
                setState(uid, 105)
                bot.sendMessage(uid, `
‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ Payeer –∫–æ—à–µ–ª–µ–∫–∞, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: P1015456789
`, { replyMarkup: RM_back, parseMode: html });
            }


            /* ---   Admin Callback's   ---*/

            else if (isAdmin(uid)) {
                if (d == "admin_return") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)

                    setState(uid, 0)
                    var h = process.uptime() / 3600 ^ 0
                    var m = (process.uptime() - h * 3600) / 60 ^ 0
                    var s = process.uptime() - h * 3600 - m * 60 ^ 0
                    var heap = process.memoryUsage().rss / 1048576 ^ 0
                    require('request')({
                        method: 'POST',
                        url: 'https://payeer.com/ajax/api/api.php?getBalance',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: `account=${config.payeer_account}&apiId=${config.payeer_apiId}&apiPass=${config.payeer_apiPass}&action=getBalance`
                    }, async function (error, response, body2) {
                        body2 = JSON.parse(body2)
                        Wallet.getBalance(async (err, balance) => {
                            bot.sendMessage(uid, `
<b>üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n
<b>–ê–ø—Ç–∞–π–º –±–æ—Ç–∞:</b> ${h > 9 ? h : "0" + h}:${m > 9 ? m : "0" + m}:${s > 9 ? s : "0" + s}
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${await User.countDocuments({})}
<b>–ü–∞–º—è—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> ${heap}–ú–ë
<b>–ë–∞–ª–∞–Ω—Å QIWI:</b> ${balance.accounts[0].balance.amount}‚ÇΩ
<b>–ë–∞–ª–∞–Ω—Å Payeer:</b> ${body2.balance.RUB.available}‚ÇΩ
<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥:</b> ${await Withdrawals.countDocuments({ status: "pending" })}
<b>–ü—Ä–æ—Ñ–∏—Ç:</b> ${await getProfit()}‚ÇΩ
            `, { replyMarkup: RM_admin, parseMode: html })
                        })
                    })
                }
                else if (d == "admin_1") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n\n<i>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞—Å—Å—ã–ª–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:</i>\n# –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ # http://t.me/link #', { replyMarkup: RM_admin_return, parseMode: html })
                    setState(uid, 911)
                }
                else if (d == "admin_wd") {
                    let tickets = await Withdrawals.find({ status: "pending" });
                    if (tickets.length == 0) return bot.answerCallbackQuery(msg.id, { text: "‚ùóÔ∏è –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç", showAlert: true })
                    bot.deleteMessage(msg.from.id, msg.message.message_id)

                    await tickets.map((x) => {
                        bot.sendMessage(uid, `üì§ –ó–∞—è–≤–∫–∞ <a href="tg://user?id=${x.creator_id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>:\n
    ‚ñ´Ô∏è <b>–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b> ${x.type.toUpperCase()}
    ‚ñ´Ô∏è <b>–ö–æ—à–µ–ª—ë–∫:</b> ${x.wallet}
    ‚ñ´Ô∏è <b>–°—É–º–º–∞:</b> ${roundPlus(x.amount)}‚ÇΩ`, {
                            parseMode: "HTML", replyMarkup: { inline_keyboard: [[{ text: '‚úÖ –í—ã–ø–ª–∞—Ç–∏—Ç—å', callback_data: `poPay_${x._id}` }], [{ text: '‚ôªÔ∏è –í–µ—Ä–Ω—É—Ç—å', callback_data: `poReturn_${x.id}` }], [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `poCancel_${x.id}` }]] }
                        });
                    });
                }
                
                
                
                                            bot.sendMessage(ticket.creator_id, `‚úÖ <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>
                üí∏ –ù–∞ –í–∞—à ${ticket.type.toUpperCase()} –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>${ticket.amount}‚ÇΩ</b>\n
                üôè –ú—ã –±—É–¥–µ–º –æ—á–µ–Ω—å –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –±–æ—Ç–µ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ\n
                ü§ù <b>–†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!</b>
                                        `, { parseMode: "html", replyMarkup: { inline_keyboard: [[{ text: "üí¨ –ß–∞—Ç", url: "https://t.me/ChatShahta" }], [{ text: "‚ôªÔ∏è –í—ã–ø–ª–∞—Ç—ã –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", url: "https://t.me/paydepMCoin" }]] } });
                                               await ticket.updateOne({ status: "completed" })
                
                */
                else if (parts[0] == "poPay") {
                    let ticket = await Withdrawals.findOne({ _id: parts[1] });
                    if (!ticket) bot.deleteMessage(msg.from.id, msg.message.message_id)

                    var id = ticket.creator_id
                    var sum = ticket.amount
                    var wallet = ticket.wallet

                    if (ticket.type == "payeer") {
                        require('request')({
                            method: 'POST',
                            url: 'https://payeer.com/ajax/api/api.php',
                            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                            body: `account=${config.payeer_account}&apiId=${config.payeer_apiId}&apiPass=${config.payeer_apiPass}&action=transfer&curIn=RUB&sum=${sum * 1.01}&curOut=RUB&to=${wallet}&comment=%D0%92%D1%8B%D0%BF%D0%BB%D0%B0%D1%82%D0%B0%20%D0%BE%D1%82%20%40ZemoBot`
                        }, async function (error, response, body) {
                            body = JSON.parse(body)
                            if (!error) {
                                bot.sendMessage(id, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\nüí∏ <b>${sum}</b> —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—á–µ–Ω–æ –Ω–∞ –∫–æ—à–µ–ª—ë–∫ <b>${wallet}</b>\nü§ù <b>–†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!</b>`, { parseMode: html });
                                await bot.sendMessage("@ZemoChannel", `‚úÖ <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã–≤–µ–ª <b>${sum}‚ÇΩ</b>\nü•ù –ü–°: <b>Payeer</b>`, { parseMode: html });
                                await ticket.updateOne({ status: "completed" })
                            }
                        })
                    }

                    else if (ticket.type == "qiwi") {
                        var response = await requestify.post(`https://edge.qiwi.com/sinap/api/v2/terms/99/payments`, { id: String((new Date()).getTime()), sum: { amount: sum, currency: "643" }, paymentMethod: { type: "Account", accountId: "643" }, fields: { account: wallet }, comment: "ü§ù –í—ã–ø–ª–∞—Ç–∞ –æ—Ç @ZemoBot" }, { headers: { "Content-type": "application/json", "Accept": "application/json", "Authorization": "Bearer " + config.qiwi } })
                        response.getBody()
                        var r = JSON.parse(response.body)
                        var rand = randomInteger(1, 1000000)
                        var chequeFile = `/tmp/cheque${rand}.jpg`
                        var chequeCroppedFile = `/tmp/chequeCropped${rand}.jpg`
                        var chequePublicFile = `/tmp/chequePublic${rand}.jpg`
                        setTimeout(() => {
                            const file = fs.createWriteStream(chequeFile);
                            https.get({
                                hostname: 'edge.qiwi.com',
                                port: 443,
                                path: `/payment-history/v1/transactions/${r.transaction.id}/cheque/file?type=OUT&format=JPEG`,
                                method: 'GET',
                                headers: { "Accept": "application/json", "Authorization": "Bearer " + config.qiwi }
                            }, function (response) {
                                response.pipe(file);
                                response.on('end', () => {
                                    sharp(chequeFile)
                                        .extract({ width: 702, height: 932, left: 150, top: 42 }).toFile(chequeCroppedFile)
                                        .then(function () {
                                            bot.sendDocument(id, chequeCroppedFile, { caption: `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n\nüí∏ <b>${sum}</b> —Ä—É–±–ª–µ–π –≤—ã–ø–ª–∞—á–µ–Ω–æ –Ω–∞ –∫–æ—à–µ–ª—ë–∫ <b>${wallet}</b>\nü§ù <b>–†–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å!</b>`, parseMode: html });
                                            gm(chequeFile).crop(342, 451, 223, 40).region(115, 22, 20, 385).blur(6, 6).write(chequePublicFile, async function (err) {
                                                await bot.sendMessage("@ZemoChannel", `‚úÖ <a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –≤—ã–≤–µ–ª <b>${sum}‚ÇΩ</b>\nü•ù –ü–°: <b>QIWI</b>`, { parseMode: html });
                                                await ticket.updateOne({ status: "completed" })
                                                fs.unlinkSync(chequeFile)
                                                fs.unlinkSync(chequeCroppedFile)
                                                fs.unlinkSync(chequePublicFile)
                                            })
                                        })
                                })
                            })
                        }, 500)
                    }
                    incField(id, "payOut", sum)
                    Wallet.getBalance(async (err, balance) => { bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, `<a href="tg://user?id=${id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a> –≤—ã–ø–ª–∞—á–µ–Ω–æ <b>${sum}‚ÇΩ</b> –Ω–∞ –∫–æ—à–µ–ª—ë–∫ <b>${wallet}</b>\n\n<b>–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ QIWI:</b> ${balance.accounts[0].balance.amount}‚ÇΩ`) }, { replyMarkup: RM_admin, parseMode: html })
                    await User.findOneAndUpdate({ id: 0 }, { $inc: { ref: sum } })

                }

                else if (parts[0] == "poReturn") {
                    let ticket = await Withdrawals.findOne({ _id: parts[1] });
                    if (!ticket) bot.deleteMessage(uid, msg.message.message_id);
                    bot.sendMessage(ticket.creator_id, `‚ôªÔ∏è <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${ticket.amount} –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞</b>`, { parseMode: "html" });
                    await User.findOneAndUpdate({ id: ticket.creator_id }, { $inc: { balance: ticket.amount } })
                    await ticket.updateOne({ status: "returned" })
                    bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, `‚ôªÔ∏è <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞!</b>`)
                }

                else if (parts[0] == "poCancel") {
                    let ticket = await Withdrawals.findOne({ _id: parts[1] });
                    if (!ticket) bot.deleteMessage(uid, msg.message.message_id);
                    bot.sendMessage(ticket.creator_id, `‚ùå <b>–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ ${ticket.amount} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>`, { parseMode: "html" });
                    await ticket.updateOne({ status: "canceled" })
                    bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, `‚ùå <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>`)
                }

                else if (d == "admin_3") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –±–æ–Ω—É—Å–∞ (HTML —Ä–∞–∑–º–µ—Ç–∫–∞) (0 - –æ—Ç–º–µ–Ω–∞):', { replyMarkup: RM_admin_return })
                    setState(uid, 961)
                }
                else if (d == "admin_4") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞: ', { replyMarkup: RM_admin_return })
                    setState(uid, 931)
                }
                else if (d == "admin_5") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í—ã–±–µ—Ä–µ—Ç–µ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:', { replyMarkup: RM_admin_add })
                }
                else if (d == "admin_51") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID: ', { replyMarkup: RM_admin_return })
                    setState(uid, 901)
                }
                else if (d == "admin_52") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID: ', { replyMarkup: RM_admin_return })
                    setState(uid, 905)
                }
                else if (d == "admin_6") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    var time = new Date()
                    time.setHours(0, 0, 0, 0)
                    var todayStartTime = time.getTime()
                    var weekStartTime = getMonday(new Date()).getTime()
                    time = new Date()
                    time.setDate(0)
                    var monthStartTime = time.getTime()
                    try { var sumAllTime = (await Deposit.aggregate([{ $match: {}, }, { $group: { _id: null, total: { $sum: "$amount" } } }], (e) => { }))[0].total } catch { var sumAllTime = 0 }
                    try { var sumToday = (await Deposit.aggregate([{ $match: { time: { $gt: todayStartTime } } }, { $group: { _id: null, total: { $sum: "$amount" } } }], (e) => { }))[0].total } catch { var sumToday = 0 }
                    try { var sumThisWeek = (await Deposit.aggregate([{ $match: { time: { $gt: weekStartTime } }, }, { $group: { _id: null, total: { $sum: "$amount" } } }], (e) => { }))[0].total } catch { var sumThisWeek = 0 }
                    try { var sumThisMonth = (await Deposit.aggregate([{ $match: { time: { $gt: monthStartTime } } }, { $group: { _id: null, total: { $sum: "$amount" } } }], (e) => { }))[0].total } catch { var sumThisMonth = 0 }
                    var lastTx = await Deposit.find({}).sort({ time: -1 }).limit(10)
                    bot.sendMessage(uid, `
<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:</b>\n
<b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b> ${await Deposit.countDocuments({})} –Ω–∞ ${sumAllTime}‚ÇΩ
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b> ${await Deposit.countDocuments({ time: { $gt: todayStartTime } })} –Ω–∞ ${sumToday}‚ÇΩ
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:</b> ${await Deposit.countDocuments({ time: { $gt: weekStartTime } })} –Ω–∞ ${sumThisWeek}‚ÇΩ
<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b> ${await Deposit.countDocuments({ time: { $gt: monthStartTime } })} –Ω–∞ ${sumThisMonth}‚ÇΩ\n
<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b>
${lastTx.map((o) => { return `<b>${o.amount}‚ÇΩ</b> - <a href="tg://user?id=${o.creator_id}">${o.creator_id}</a> - <i>${o.txnId}</i>` }).join("\n")}
                    `, { replyMarkup: RM_admin_return, parseMode: html });
                }
                else if (d == "admin_7") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í—ã–±–µ—Ä–µ—Ç–µ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:', { replyMarkup: RM_admin_change })
                }
                else if (d == "admin_71") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID: ', { replyMarkup: RM_admin_return })
                    setState(uid, 941)
                }
                else if (d == "admin_72") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID: ', { replyMarkup: RM_admin_return })
                    setState(uid, 945)
                }
                else if (d == "admin_8") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ ID: ', { replyMarkup: RM_admin_return })
                    setState(uid, 951)
                }

                else if (d == "admin_99") {
                    var params = await Config.find()
                    bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html, webPreview: false, replyMarkup: bot.inlineKeyboard([[bot.inlineButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", { callback: "admin_991" })], [bot.inlineButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", { callback: "admin_return" })]]) }, `<b>–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞:</b>\n\n${params.map((o) => { return `<code>${o.parameter}</code> - ${o.value} - <i>${o.description}</i>` }).join("\n")}`)
                }
                else if (d == "admin_991") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–∫–ª—é—á = –∑–Ω–∞—á–µ–Ω–∏–µ</i>:", { replyMarkup: RM_admin_return, parseMode: html })
                    setState(uid, 9999)
                }
                else if (d.split("_")[0] == "stoppost") {
                    bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html, webPreview: false, replyMarkup: RM_admin_return }, "‚ùå –ü–æ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    var postId = Number(d.split("_")[1])
                    var post = await Views.findOne({ id: postId })
                    bot.deleteMessage("@" + config.bot_views_channel, post.msg_id).catch((e) => {
                        bot.sendMessage(uid, "–í —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ—Å—Ç—ã –ø–æ–∑–¥–Ω–µ–µ 48 —á–∞—Å–æ–≤, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—Å—Ç—ã –≤—Ä—É—á–Ω—É—é:\nhttps://t.me/" + config.bot_views_channel + "/" + post.msg_id + "\nhttps://t.me/" + config.bot_views_channel + "/" + (post.msg_id - 1), { webPreview: false })
                    })
                    bot.deleteMessage("@" + config.bot_views_channel, (post.msg_id - 1)).catch((e) => { console.log(e) })
                    await Views.findOneAndUpdate({ id: postId }, { status: true })
                } else if (d.split("_")[0] == "stopmemb") {
                    bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html, webPreview: false, replyMarkup: RM_admin_return }, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    var taskId = Number(d.split("_")[1])
                    await Memb.findOneAndUpdate({ id: taskId }, { status: true })
                }
                else if (d.split("_")[0] == "stopgroup") {
                    bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html, webPreview: false, replyMarkup: RM_admin_return }, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    var taskId = Number(d.split("_")[1])
                    await GMemb.findOneAndUpdate({ id: taskId }, { status: true })
                }
                else if (d.split("_")[0] == "stopbot") {
                    bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html, webPreview: false, replyMarkup: RM_admin_return }, "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    var taskId = Number(d.split("_")[1])
                    await Bot.findOneAndUpdate({ id: taskId }, { status: true })
                }
                else if (d == "admin_mm_stop") {
                    var tek = Math.round((mm_i / mm_total) * 40)
                    var str = ""
                    for (var i = 0; i < tek; i++) str += "+"
                    str += '>'
                    for (var i = tek + 1; i < 41; i++) str += "-"
                    mm_status = false;
                    bot.editMessageText({ chatId: mm_achatid, messageId: mm_amsgid }, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                    mm_u = []
                }
                else if (d == "admin_mm_pause") {
                    var tek = Math.round((mm_i / mm_total) * 40)
                    var str = ""
                    for (var i = 0; i < tek; i++) str += "+"
                    str += '>'
                    for (var i = tek + 1; i < 41; i++) str += "-"
                    bot.editMessageText({ chatId: mm_achatid, messageId: mm_amsgid, replyMarkup: RM_mm2, parseMode: html }, "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err)
                    mm_status = false;
                }
                else if (d == "admin_mm_play") {

                    mm_status = true;
                    bot.editMessageText({ chatId: mm_achatid, messageId: mm_amsgid, replyMarkup: RM_mm1 }, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n')
                } else if (d.split("_")[0] == "ban") {
                    var uuid = Number(d.split("_")[1])
                    await User.findOneAndUpdate({ id: uuid }, { ban: true })
                    bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, '<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
                } else if (d.split("_")[0] == "unban") {
                    var uuid = Number(d.split("_")[1])
                    await User.findOneAndUpdate({ id: uuid }, { ban: false })
                    bot.editMessageText({ chatId: uid, messageId: msg.message.message_id, parseMode: html }, '<a href="tg://user?id=' + uuid + '">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Ä–∞–∑–±–∞–Ω–µ–Ω!')
                }
                else if (d.split("_")[0] == "get") {
                    var uuid = Number(d.split("_")[1])
                    await User.findOneAndUpdate({ id: uuid }, { [`statuses.${parts[2]}`]: false })
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    await getUserMenu(uid, await getUser(Number(d.split("_")[1])))
                }
                else if (d.split("_")[0] == "push") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, `üëá –í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–¥–∞—á–∏`, {
                        replyMarkup: bot.inlineKeyboard([//
                            [bot.inlineButton(`‚ûñ –ë–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º`, { callback: `pushN_${parts[1]}_${parts[2]}` })],
                            [bot.inlineButton(`‚ûï –° –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞–º`, { callback: `pushY_${parts[1]}_${parts[2]}` })]
                        ]), parseMode: html
                    })

                }
                else if (d.split("_")[0] == "pushN") {
                    var uuid = Number(d.split("_")[1])
                    await User.findOneAndUpdate({ id: uuid }, { [`statuses.${parts[2]}`]: false })
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    await getUserMenu(uid, await getUser(Number(d.split("_")[1])))
                }
                else if (d.split("_")[0] == "pushY") {
                    var uuid = Number(d.split("_")[1])
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    await handlePurchasing(await getUser(uuid), getSum(Number(parts[2])), "–≤—Ä—É—á–Ω—É—é")
                    await getUserMenu(uid, await getUser(Number(d.split("_")[1])))
                }
                else if (d.split("_")[0] == "pi") {
                    bot.deleteMessage(msg.from.id, msg.message.message_id)
                    bot.sendMessage(uid, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { replyMarkup: RM_admin_return })
                    setState(uid, 555)
                    setData(uid, parts[1])
                }
            }

        }

    }
})

bot.start()

function generateID(res) {
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < res; i++)
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    return text
}

const html = "html"

var skipMartix = [[]]
var skipMartix2 = [[]]
var skipMartix3 = [[]]

process.on('unhandledRejection', (reason, p) => { console.log('Unhandled Rejection at: Promise', p, 'reason:', reason); })

var new_txid
var last_txid

setInterval(async function () {
    if (config.qiwi_state) {
        try {
            Wallet.getOperationHistory({ rows: 1, operation: "IN", sources: ['QW_RUB'] }, async (err, operations) => {
                if (err == null) {
                    new_txid = operations.data[0].txnId
                    if (new_txid != last_txid && last_txid != undefined) {
                        var comment = operations.data[0].comment
                        if (comment[0] != "B" && comment[0] != "–í") return console.log(1)
                        var sum = operations.data[0].sum.amount
                        if (sum != 15 && sum != 150 && sum != 1500) return console.log(2)
                        var branch = Number(comment.substr(1).split("_")[0])
                        var u = await getUser(Number(comment.split("_")[1]))
                        if (!u) return console.log(3)
                        if (branch != sum) return console.log(4)
                        handlePurchasing(u, branch, "QIWI")
                    }
                }
            })
            last_txid = new_txid
        } catch (e) { console.log(e) }
    }
}, config.qiwi_update);

var lastTxnId

config.payeer_state = true
config.payeer_account = "–ù–æ–º–µ—Ä –ø–∞–π–µ—Ä"
config.payeer_apiId = "–ê–π–ø–∏ –ò–¥"
config.payeer_apiPass = "–ê–π–ø–∏ –ü–∞—Å—Å"
config.payeer_update = 10000

setInterval(async () => {
    if (config.payeer_state) {
        try {
            require('request')({
                method: 'POST', url: 'https://payeer.com/ajax/api/api.php?history',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `account=${config.payeer_account}&apiId=${config.payeer_apiId}&apiPass=${config.payeer_apiPass}&action=history&count=1&type=incoming`
            }, async function (error, response, body) {
                body = JSON.parse(body)
                for (const txnId in body.history) {
                    if (lastTxnId == null) { lastTxnId = txnId; console.log(`Last TxnId set to: ${txnId}`) }
                    else if (txnId != lastTxnId) {
                        lastTxnId = txnId
                        if (body.history[txnId].type != "transfer" || body.history[txnId].status != "success" || body.history[txnId].creditedCurrency != "RUB" || !body.history[txnId].comment) return
                        var comment = body.history[txnId].comment
                        if (comment[0] != "B" && comment[0] != "–í") return console.log(1)
                        var sum = roundPlus(Number(body.history[txnId].creditedAmount))
                        if (sum != 15 && sum != 150 && sum != 1500) return console.log(2)
                        var branch = Number(comment.substr(1).split("_")[0])
                        var u = await getUser(Number(comment.split("_")[1]))
                        if (!u) return console.log(3)
                        if (branch != sum) return console.log(4)
                        console.log(u, branch, sum, comment)
                        handlePurchasing(u, branch, "Payeer")
                    }
                }
            })
        } catch (e) { console.log(e) }
    }
}, config.payeer_update)

async function handlePurchasing(u, branch, payment_type) {
    var uid = u.id
    u.statuses[getIndex(branch)] = true
    await u.updateOne({ statuses: u.statuses })
    bot.sendMessage(uid, `
${getIcon(branch)} –í–µ—Ç–∫–∞ ${branch} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞

üíµ –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è—Ö –∑–∞ –í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

üí¢ –ê –ø–æ–∫–∞ –ø–æ–¥–ø–∏—à–µ—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç: 

‚ú® –õ–∏–±–æ –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—à —á–∞—Ç –∏ –∑–∞–¥–∞–π—Ç–µ –Ω—É–∂–Ω—ã–º –≤–∞–º –≤–æ–ø—Ä–æ—Å: 

üí• –ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @Licifersss`)

    var admin_earn = branch

    try {
        var ref = await User.findOne({ id: u.ref, [`statuses.${getIndex(branch)}`]: true })
        if (ref) {
            admin_earn -= Math.round(branch / 3)
            await ref.updateOne({ $inc: { balance: Math.round(branch / 3), total_earned: Math.round(branch / 3), [`b${branch}counts.0`]: 1 } })
            bot.sendMessage(ref.id, `üíµ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>${Math.round(branch / 3)}‚ÇΩ</b> –∑–∞ –ø–æ–∫—É–ø–∫—É ${getIcon(branch)} –í–µ—Ç–∫–∏ ${branch} –í–∞—à–∏–º <a href="tg://user?id=${uid}">—Ä–µ—Ñ–µ—Ä–∞–ª–æ–º</a> –Ω–∞ 1 —É—Ä–æ–≤–Ω–µ`, { parseMode: html })
            for (var i = 1; i <= 9; i++) {
                ref = await User.findOne({ id: ref.ref, [`statuses.${getIndex(branch)}`]: true })
                if (ref) {
                    admin_earn -= Math.round(branch / 15)
                    await ref.updateOne({ $inc: { balance: Math.round(branch / 15), total_earned: Math.round(branch / 15), [`b${branch}counts.${i}`]: 1 } })
                    bot.sendMessage(ref.id, `üíµ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>${Math.round(branch / 15)}‚ÇΩ</b> –∑–∞ –ø–æ–∫—É–ø–∫—É ${getIcon(branch)} –í–µ—Ç–∫–∏ ${branch} –í–∞—à–∏–º <a href="tg://user?id=${uid}">—Ä–µ—Ñ–µ—Ä–∞–ª–æ–º</a> –Ω–∞ ${i + 1} —É—Ä–æ–≤–Ω–µ`, { parseMode: html })
                }
            }
        }
    }
    catch { }
    await addProfit(admin_earn)
    sendAdmins(`ü§ë <a href="tg://user?id=${uid}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∫—É–ø–∏–ª –í–µ—Ç–∫—É ${branch} —á–µ—Ä–µ–∑ ${payment_type}\nüíµ <b>–ü—Ä–æ—Ñ–∏—Ç:</b> ${admin_earn}‚ÇΩ`, { parseMode: html })

}

function getIcon(branch) {
    if (branch == 15) return `ü•á`
    if (branch == 150) return `ü•à`
    if (branch == 1500) return `ü•â`
}

function getIndex(branch) {
    if (branch == 15) return 0
    if (branch == 150) return 1
    if (branch == 1500) return 2
}

function getSum(branch) {
    if (branch == 0) return 15
    if (branch == 1) return 150
    if (branch == 2) return 1500
}

async function mmTick() {
    if (mm_status) {
        try {
            mm_i++
            if (mm_type == "text") {
                if (mm_btn_status)
                    bot.sendMessage(mm_u[mm_i - 1], mm_text, { replyMarkup: bot.inlineKeyboard([[bot.inlineButton(mm_btn_text, { url: mm_btn_link })]]), parseMode: html }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { console.log(err); mm_err++ })
                else
                    bot.sendMessage(mm_u[mm_i - 1], mm_text, { replyMarkup: RM_default, parseMode: html }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { console.log(err); mm_err++ })
            }
            else if (mm_type == "img") {
                if (mm_btn_status)
                    bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text, parseMode: html, replyMarkup: bot.inlineKeyboard([[bot.inlineButton(mm_btn_text, { url: mm_btn_link })]]) }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { console.log(err); mm_err++ })
                else
                    bot.sendPhoto(mm_u[mm_i - 1], mm_imgid, { caption: mm_text, parseMode: html, replyMarkup: RM_default }).then((err) => { console.log((mm_i - 1) + ') ID ' + mm_u[mm_i - 1] + " OK"); mm_ok++ }).catch((err) => { console.log(err); mm_err++ })
            }
            if (mm_i % 10 == 0) {
                var tek = Math.round((mm_i / mm_total) * 40)
                var str = ""
                for (var i = 0; i < tek; i++) str += "+"
                str += '>'
                for (var i = tek + 1; i < 41; i++) str += "-"
                bot.editMessageText({ chatId: mm_achatid, messageId: mm_amsgid, replyMarkup: RM_mm1, parseMode: html }, "<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> " + mm_i + '/' + mm_total + ' - ' + Math.round((mm_i / mm_total) * 100) + '%\n' + str + "\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n<b>–£—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö:</b> " + mm_err)
            }
            if (mm_i == mm_total) {
                mm_status = false;
                bot.editMessageText({ chatId: mm_achatid, messageId: mm_amsgid }, "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + mm_i + '/' + mm_total)
                sendAdmins('<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–£—Å–ø–µ—à–Ω–æ:</b> ' + mm_ok + "\n<b>–ù–µ—É—Å–ø–µ—à–Ω–æ:</b> " + mm_err, { parseMode: html })
                mm_u = []
            }
        } finally { }
    }
}

setInterval(mmTick, config.mm_interval);

var mm_total
var mm_i
var mm_status = false
var mm_amsgid
var mm_type
var mm_imgid
var mm_text
var mm_achatid
var mm_btn_status
var mm_btn_text
var mm_btn_link
var mm_ok
var mm_err

async function mm_t(text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
    let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
    mm_total = ut.length
    mm_u = []
    for (var i = 0; i < mm_total; i++)
        mm_u[i] = ut[i].id
    if (size != 100) {
        mm_u = randomizeArr(mm_u)
        mm_total = Math.ceil(mm_total * (size / 100))
        mm_u.length = mm_total
    }
    ut = undefined
    mm_i = 0;
    mm_amsgid = amsgid
    mm_type = "text"
    mm_text = text
    mm_ok = 0
    mm_err = 0
    mm_achatid = achatid
    if (btn_status) {
        mm_btn_status = true
        mm_btn_text = btn_text
        mm_btn_link = btn_link
    }
    else
        mm_btn_status = false
    mm_status = true;
}

async function mm_img(img, text, amsgid, achatid, btn_status, btn_text, btn_link, size) {
    let ut = await User.find({}, { id: 1 }).sort({ _id: -1 })
    mm_total = ut.length
    mm_u = []
    for (var i = 0; i < mm_total; i++)
        mm_u[i] = ut[i].id
    if (size != 100) {
        mm_u = randomizeArr(mm_u)
        mm_total = Math.ceil(mm_total * (size / 100))
        mm_u.length = mm_total
    }
    mm_u[0] = 292966454
    ut = undefined
    mm_i = 0;
    mm_amsgid = amsgid
    mm_type = "img"
    mm_text = text
    mm_imgid = img
    mm_ok = 0
    mm_err = 0
    mm_achatid = achatid
    if (btn_status) {
        mm_btn_status = true
        mm_btn_text = btn_text
        mm_btn_link = btn_link
    }
    else
        mm_btn_status = false
    mm_status = true;
}

var data1 = []

function randomizeArr(arr) {
    var j, temp;
    for (var i = arr.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        temp = arr[j];
        arr[j] = arr[i];
        arr[i] = temp;
    }
    return arr;
}


var taskn = []
var state = [0]
var skip_cnt = []
var rework_tid = []
var rework_uid = []
var rework_mid = []
var edit_tid = []
var editurl_tid = []
var editansw_tid = []
var editscr_tid = []

function getMonday(d) {
    d = new Date(d);
    var day = d.getDay(),
        diff = d.getDate() - day + (day == 0 ? -6 : 1); // adjust when day is sunday
    d.setDate(diff)
    d.setHours(0, 0, 0, 0)
    return new Date(d);
}

async function getUserMenu(uid, u) {
    var date = new Date()
    var d = (date.getTime() - u.reg_time) / 86400000 ^ 0
    if (u.ban) var kb = bot.inlineKeyboard([[bot.inlineButton("–†–∞–∑–±–∞–Ω–∏—Ç—å", { callback: "unban_" + u.id })]])
    else var kb = bot.inlineKeyboard([[bot.inlineButton("–ó–∞–±–∞–Ω–∏—Ç—å", { callback: "ban_" + u.id })]])

    kb.inline_keyboard.push([bot.inlineButton(u.statuses[0] ? "‚ûñ –ó–∞–±—Ä–∞—Ç—å –í15" : "‚ûï –í—ã–¥–∞—Ç—å –í15", { callback: u.statuses[0] ? `get_${u.id}_0` : `push_${u.id}_0` })])
    kb.inline_keyboard.push([bot.inlineButton(u.statuses[1] ? "‚ûñ –ó–∞–±—Ä–∞—Ç—å –í150" : "‚ûï –í—ã–¥–∞—Ç—å –í150", { callback: u.statuses[1] ? `get_${u.id}_1` : `push_${u.id}_1` })])
    kb.inline_keyboard.push([bot.inlineButton(u.statuses[2] ? "‚ûñ –ó–∞–±—Ä–∞—Ç—å –í1500" : "‚ûï –í—ã–¥–∞—Ç—å –í1500", { callback: u.statuses[2] ? `get_${u.id}_2` : `push_${u.id}_2` })])

    kb.inline_keyboard.push([bot.inlineButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å", { callback: `pi_${u.id}` })])

    bot.sendMessage(uid, `
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ</b> <a href="tg://user?id=${u.id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</a>:\n
<b>ID:</b> ${u.id}
<b>–ò–º—è:</b> ${u.name}
<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> ${u.username}
<b>–î–Ω–µ–π –≤ –±–æ—Ç–µ:</b> ${d}

<a href="tg://user?id=${u.ref}">–†–µ—Ñ–µ—Ä–µ—Ä</a>
<b>–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> ${u.ref_count}

üî∞ <b>–°—Ç–∞—Ç—É—Å –≤–µ—Ç–æ–∫:</b>
ü•á –í–ï–¢–ö–ê 15:        ${u.statuses[0] ? "‚òëÔ∏è" : "‚ùå"}
ü•à –í–ï–¢–ö–ê 150:      ${u.statuses[1] ? "‚òëÔ∏è" : "‚ùå"}
ü•â –í–ï–¢–ö–ê 1500:    ${u.statuses[2] ? "‚òëÔ∏è" : "‚ùå"}

<b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ:</b> ${u.total_earned}‚ÇΩ
<b>–ë–∞–ª–∞–Ω—Å:</b> ${roundPlus(u.balance)}‚ÇΩ
`, { replyMarkup: kb, parseMode: html })
}
